#!/bin/sh
set -a
_APPLICATION_NAME=install
_REQUIRED_ARGUMENTS="_APPLICATIONS:Applications to remove"
_context_id_is_valid() {
	printf '%s' "$1" | $_CONF_INSTALL_GNU_GREP -Pq '^[a-zA-Z0-9_+-]+$' || _error "Context ID *MUST* only contain alphanumeric characters and +-: '^[a-zA-Z0-9_+-]+$' | ($1)"
}
_variable_is_set() {
	env | grep -cq "^$1=.*$"
}
_environment_filter() {
	$_CONF_INSTALL_GNU_GREP -P '(^_CONF_|^_OPTN_)'
}
_environment_dump() {
	[ -z "$_APPLICATION_PIPE_DIR" ] && return
	[ -z "$_ENVIRONMENT_FILE" ] && _ENVIRONMENT_FILE=$_APPLICATION_PIPE_DIR/environment
	mkdir -p $(dirname $_ENVIRONMENT_FILE)
	env | _environment_filter | sort -u | grep -v '^$' | sed -e 's/=/="/' -e 's/$/"/' >>$_ENVIRONMENT_FILE
}
_environment_load() {
	[ -z "$_ENVIRONMENT_FILE" ] && return 1
	[ ! -e "$_ENVIRONMENT_FILE" ] && {
		_warn "$_ENVIRONMENT_FILE does not exist!"
		return 2
	}
	. $_ENVIRONMENT_FILE 2>/dev/null
}
_call() {
	local _function_name=$1
	shift
	type $_function_name >/dev/null 2>&1
	local _return=$?
	if [ $_return -gt 0 ]; then
		_debug "${_function_name} does not exist"
		return $_return
	fi
	$_function_name "$@"
}
_() {
	local _successfulExitStatus=0
	if [ -n "$_SUCCESSFUL_EXIT_STATUS" ]; then
		_successfulExitStatus=$_SUCCESSFUL_EXIT_STATUS
		unset _SUCCESSFUL_EXIT_STATUS
	fi
	_info "## $*"
	if [ -z "$_DRY_RUN" ]; then
		"$@"
		local _exit_status=$?
		if [ $_exit_status -ne $_successfulExitStatus ]; then
			if [ -n "$_ON_FAILURE" ]; then
				$_ON_FAILURE
				return
			fi
			if [ -z "$_WARN_ON_ERROR" ]; then
				_error "Previous cmd failed" $_exit_status
			else
				unset _WARN_ON_ERROR
				_warn "Previous cmd failed - $* - $_exit_status"
				_ENVIRONMENT_FILE=$(mktemp -t error) _environment_dump
				return $_exit_status
			fi
		fi
	fi
}
_error() {
	if [ $# -ge 2 ]; then
		_EXIT_STATUS=$2
	else
		_EXIT_STATUS=1
	fi
	_EXIT_LOG_LEVEL=4
	_EXIT_STATUS_CODE="ERR"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_ERR"
	_EXIT_MESSAGE="$1 ($_EXIT_STATUS)"
	_defer _environment_dump
	_defer _log_app_exit
	exit $_EXIT_STATUS
}
_success() {
	_EXIT_STATUS=0
	_EXIT_LOG_LEVEL=3
	_EXIT_STATUS_CODE="SCS"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_SCS"
	_EXIT_MESSAGE="$1"
	_defer _log_app_exit
	exit 0
}
_on_exit() {
	[ $_EXIT ] && return 1
	_EXIT=0
	if [ -n "$_DEFERS" ]; then
		for _DEFER in $_DEFERS; do
			_call $_DEFER
		done
		unset _DEFERS
	fi
}
_defer() {
	_debug "deferring: $1"
	_DEFERS="$1 $_DEFERS"
}
_log_app_exit() {
	[ "$_EXIT_MESSAGE" ] && _print_log $_EXIT_LOG_LEVEL "$_EXIT_STATUS_CODE" "$_EXIT_COLOR_CODE" "$_EXIT_BEEP" "$_EXIT_MESSAGE"
	_log_app exit
}
_include() {
	[ ! -e $1 ] && {
		_debug "_include: $1 does NOT exist"
		return 1
	}
	. $1
}
_is_backgrounded() {
	case $(ps -o stat= -p $$) in
	*+*)
		return 1
		;;
	esac
	return 0
}
_list_pid_info() {
	_TARGET_PID=$(basename $_EXISTING_APPLICATION_PIPE)
	_TARGET_PS_DTL=$(ps -o command -p $_TARGET_PID | sed 1d | sed -e "s/^.*$_EXECUTABLE_NAME_SED_SAFE/$_EXECUTABLE_NAME_SED_SAFE/")
	_info " $_TARGET_PID - $_TARGET_PS_DTL"
}
_has_other_instances() {
	if [ $(find $_APPLICATION_CMD_DIR -maxdepth 1 -type p ! -name $$ | wc -l) -gt 0 ]; then
		return 0
	fi
	return 1
}
_kill_all() {
	_do_kill_all $_APPLICATION_PIPE_DIR
}
_kill_all_group() {
	_do_kill_all $_APPLICATION_CONTEXT_GROUP
}
_do_kill_all() {
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_kill $(basename $_EXISTING_APPLICATION_PIPE)
	done
}
_kill() {
	_warn "Killing $1"
	kill -TERM $1
}
_list() {
	_list_pid_infos $_APPLICATION_PIPE_DIR
}
_list_group() {
	_list_pid_infos $_APPLICATION_CONTEXT_GROUP
}
_list_pid_infos() {
	_info "Running processes:"
	_EXECUTABLE_NAME_SED_SAFE=$(_sed_safe $0)
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_list_pid_info
	done
}
_parent_processes() {
	[ -n "$_PARENT_PROCESSES_FUNCTION" ] && $_PARENT_PROCESSES_FUNCTION
}
_parent_processes_pgrep() {
	pgrep -P $1
}
_mktemp() {
	mktemp -t ${_APPLICATION_NAME}.${_APPLICATION_CMD}.$1.XXXXXXXX
}
_init_logging() {
	unset _LOGFILE
	case $_CONF_INSTALL_LOG_LEVEL in
	0)
		local logfile=$(_mktemp debug)
		_warn "Writing debug contents to: $logfile"
		_set_logfile "$logfile"
		set -x
		;;
	esac
}
_set_logfile() {
	if [ -n "$1" ]; then
		_LOGFILE=$1
		mkdir -p $(dirname $1)
		exec >>$1
		exec 2>>$1
	fi
}
_reset_logging() {
	exec >&7
	exec 2>&8
}
_warn() {
	_print_log 3 WRN "$_CONF_INSTALL_C_WRN" "$_CONF_INSTALL_BEEP_WRN" "$1"
}
_info() {
	_print_log 2 INF "$_CONF_INSTALL_C_INFO" "$_CONF_INSTALL_BEEP_INFO" "$1"
}
_detail() {
	_print_log 2 DTL "$_CONF_INSTALL_C_DETAIL" "$_CONF_INSTALL_BEEP_DETAIL" "$1"
}
_debug() {
	_print_log 1 DBG "$_CONF_INSTALL_C_DEBUG" "$_CONF_INSTALL_BEEP_DEBUG" "($$) $1"
}
_log() {
	:
}
_colorize_text() {
	printf '\033[%s%s\033[0m' "$1" "$2"
}
_sed_remove_nonprintable_characters() {
	sed -e 's/[^[:print:]]//g'
}
_print_log() {
	if [ -z "$5" ]; then
		if test ! -t 0; then
			cat - | _sed_remove_nonprintable_characters |
				while read _line; do
					_print_log $1 $2 $3 $4 "$_line"
				done
			return
		fi
		return
	fi
	local message="$5"
	if [ $1 -lt $_CONF_INSTALL_LOG_LEVEL ]; then
		return
	fi
	[ -n "$_LOGGING_CONTEXT" ] && message="$_LOGGING_CONTEXT - $message"
	local _message_date_time=$(date +"$_CONF_INSTALL_DATE_FORMAT")
	if [ $_BACKGROUNDED ] && [ $_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD ]; then
		$_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD "$2" "$_message" &
	fi
	_log "$1" "$2" "$message"
	[ -n "$4" ] && _beep "$4"
	_log_to_file "$2" "$_message_date_time" "${_LOG_INDENT}$message"
	_log_to_console "$3" "$2" "$_message_date_time" "${_LOG_INDENT}$message"
}
_add_logging_context() {
	[ -z "$1" ] && return 1
	if [ -z "$_LOGGING_CONTEXT" ]; then
		_LOGGING_CONTEXT="$1"
		return
	fi
	_LOGGING_CONTEXT="$_LOGGING_CONTEXT.$1"
}
_remove_logging_context() {
	[ -z "$_LOGGING_CONTEXT" ] && return 1
	case $_LOGGING_CONTEXT in
	*.*)
		_LOGGING_CONTEXT=$(printf '%s' "$_LOGGING_CONTEXT" | sed 's/\.[a-z0-9 _-]*$//')
		;;
	*)
		unset _LOGGING_CONTEXT
		;;
	esac
}
_increase_indent() {
	_LOG_INDENT="$_LOG_INDENT${_CONF_INSTALL_INDENT}"
}
_decrease_indent() {
	_LOG_INDENT=$(printf '%s' "$_LOG_INDENT" | sed -e "s/${_CONF_INSTALL_INDENT}$//")
	[ ${#_LOG_INDENT} -eq 0 ] && _reset_indent
}
_reset_indent() {
	unset _LOG_INDENT
}
_log_to_file() {
	if [ $_NON_INTERACTIVE ] || [ $_LOGFILE ]; then
		if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
			printf >&$_NLOG_TARGET '%s %s %s\n' "$1" "$2" "$3"
		else
			printf >&$_NLOG_TARGET '%s\n' "$3"
		fi
		_syslog "$3"
	fi
}
_log_to_console() {
	[ $_NO_WRITE_STDERR ] && return
	_is_open $_LOG_TARGET || return
	[ $_NON_INTERACTIVE ] && [ -z $_LOGFILE ] && return
	if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
		printf >&$_LOG_TARGET '\033[%s%s \033[0m%s %s\n' "$1" "$2" "$3" "$4"
	else
		printf >&$_LOG_TARGET '\033[%s%s \033[0m\n' "$1" "$4"
	fi
}
_is_open() {
	(: >&"$1") 2>/dev/null
}
_log_app() {
	_debug "$_APPLICATION_NAME:$_APPLICATION_CMD - $1 ($$)"
}
_syslog() {
	logger -i -t "$_APPLICATION_NAME.$_APPLICATION_CMD" "$1"
}
_beep() {
	if [ -n "$_BEEPING" ]; then
		_debug "Another 'beep' is in progress"
		return
	fi
	_BEEPING=1
	_do_beep "$@" &
}
_do_beep() {
	if [ -e /dev/speaker ]; then
		printf '%s' "$1" >/dev/speaker
	fi
	_beep_done
}
_beep_done() {
	unset _BEEPING
}
_sudo_precmd() {
	_beep $_CONF_INSTALL_SUDO_BEEP_TONE
}
_on_exit_beep() {
	local current_time=$(date +%s)
	local timeout=$(($current_time + $_CONF_INSTALL_BEEP_TIMEOUT))
	[ $current_time -le $timeout ] && return 1
	local beep_code
	if [ $_EXIT_STATUS -gt 0 ]; then
		beep_code="$_CONF_INSTALL_BEEP_ERR"
	else
		beep_code="$_CONF_INSTALL_BEEP_SCS"
	fi
	_beep "$beep_code" &
}
_interactive_alert_if() {
	_is_interactive_alert_enabled && _interactive_alert "$@"
}
_is_interactive_alert_enabled() {
	grep -cq '^_OPTN_INSTALL_INTERACTIVE_ALERT=1$' $_CONF_INSTALL_APPLICATION_CONFIG_PATH 2>/dev/null
}
_read_ifs() {
	stty -echo
	_read_if "$@"
	stty echo
}
_continue_if() {
	_read_if "$1" _PROCEED "$2"
	local proceed="$_PROCEED"
	unset _PROCEED
	if [ -z "$proceed" ]; then
		_DEFAULT=$(printf '%s' $2 | awk -F'/' {'print$1'})
		proceed=$_DEFAULT
	fi
	local proceed=$(printf '%s' "$proceed" | tr '[:lower:]' '[:upper:]')
	if [ $proceed = "N" ]; then
		return 1
	fi
	return 0
}
_read_if() {
	if [ $(env | grep -c "^$2=.*") -eq 1 ]; then
		_debug "$2 is already set"
		return 1
	fi
	[ $_NON_INTERACTIVE ] && _error "Running in non-interactive mode and user input was requested: $@" 10
	_print_log 9 STDI "$_CONF_INSTALL_C_STDIN" "$_CONF_INSTALL_BEEP_STDIN" "$1 $3"
	_interactive_alert_if $1 $3
	read -r $2
}
_sudo() {
	[ $# -eq 0 ] && _error 'No arguments were provided to _sudo'
	[ $(whoami) == 'root' ] && [ -z $_SUDO_REQUIRED ] && {
		$@
		return
	}
	_require "$_SUDO_CMD" _SUDO_CMD
	if [ -z "$_NON_INTERACTIVE" ]; then
		$_SUDO_CMD -n ls >/dev/null 2>&1 || _sudo_precmd "$@"
	fi
	$_SUDO_CMD $_SUDO_OPTIONS "$@"
}
_waitee_init() {
	_APPLICATION_PIPE=$_APPLICATION_CMD_DIR/$$
	_APPLICATION_PIPE_DIR=$(dirname $_APPLICATION_PIPE)
	mkdir -p $_APPLICATION_PIPE_DIR
	mkfifo $_APPLICATION_PIPE
	$_CONF_INSTALL_WAITER_LEVEL "($_APPLICATION_CMD) Please use -w=$$"
	_defer _waitee_done
}
_waitee_done() {
	[ -z "$_EXIT_STATUS" ] && _EXIT_STATUS=0
	if [ -n "$_WAITEE" ] && [ -e $_APPLICATION_PIPE ]; then
		_info "$0 process completed, notifying ($_EXIT_STATUS)"
		printf '%s\n' "$_EXIT_STATUS" >$_APPLICATION_PIPE
		_info "$0 downstream process picked up"
	fi
	rm -f $_APPLICATION_PIPE
}
_waiter() {
	if [ -n "$_WAITER_PID" ]; then
		_UPSTREAM_APPLICATION_PIPE=$(find $_APPLICATION_CONTEXT_GROUP -type p -name $_WAITER_PID 2>/dev/null | head -1)
		if [ -z "$_UPSTREAM_APPLICATION_PIPE" ]; then
			_error "$_WAITER_PID not found"
		fi
		if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
			_warn "$_UPSTREAM_APPLICATION_PIPE does not exist, did upstream start?"
			return
		fi
		_info "Waiting for upstream to complete: $_WAITER_PID"
		while [ 1 ]; do
			if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
				_error "Upstream pipe no longer exists"
			fi
			_UPSTREAM_APPLICATION_STATUS=$(_timeout $_CONF_INSTALL_WAIT_INTERVAL "_waiter:upstream" cat $_UPSTREAM_APPLICATION_PIPE 2>/dev/null)
			local _UPSTREAM_STATUS=$?
			if [ $_UPSTREAM_STATUS -eq 0 ]; then
				if [ -z "$_UPSTREAM_APPLICATION_STATUS" ] || [ $_UPSTREAM_APPLICATION_STATUS -gt 0 ]; then
					_error "Upstream exited with error ($_UPSTREAM_APPLICATION_STATUS)"
				fi
				_warn "Upstream finished: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
				break
			fi
			_detail " Upstream is still running: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
		done
	fi
}
_contains_argument() {
	local _key=$1
	shift
	for _ARG in "$@"; do
		case $_ARG in
		$_key)
			return 0
			;;
		esac
	done
	return 1
}
_require() {
	local level=error
	if [ -z "$1" ]; then
		[ -n "$_WARN" ] && level=warn
		_$level "$2 required $_REQUIRE_DETAILED_MESSAGE" $3
		return 1
	fi
	unset _REQUIRE_DETAILED_MESSAGE
}
_value_in() {
	local level=error
	[ -n "$_WARN" ] && level=warn
	printf '%s\n' "$1" | $_CONF_INSTALL_GNU_GREP -Pcq "^($2)$" || _$level "$1 is not in ^($2)$"
}
_app_default_bootstrap() {
	:
}
_app_default_install() {
	if [ -n $_USER ]; then
		_SUDO_OPTIONS="-u $USER" _sudo xdg-mime default $1.desktop $2
		return $?
	fi
	xdg-mime default $1.desktop $2
}
_app_default_uninstall() {
	:
}
_app_default_is_installed() {
	:
}
_app_default_enabled() {
	return 0
}
_user_bootstrap() {
	_sudo mkdir -p /root/.ssh/socket
	_sudo chmod -R 700 /root/.ssh/socket
	app-install configuration
}
_user_install() {
	_users_add "$1"
}
_user_uninstall() {
	. "$1"
	_require "$username" "username"
	userdel $username
}
_user_is_installed() {
	:
}
_user_enabled() {
	return 0
}
_users_add_argument() {
	if [ -n "$2" ]; then
		user_options="$user_options $1 $2"
	fi
}
_users_add() {
	. $1
	if [ "root" != "$username" ]; then
		_sudo pw user show $username >/dev/null 2>&1 || {
			_info "### Add User: $1: $username"
			user_options="-m"
			_users_add_argument "-g" "$gid"
			_users_add_argument "-G" "$grouplist"
			_users_add_argument "-s" "$shell"
			_users_add_argument "-u" "$uid"
			_users_add_argument "-p" "$password"
			_sudo useradd $user_options $username
		}
	else
		_info "# Setting shell to $shell for root"
		_sudo chsh -s "$shell"
		if [ -n "$password" ]; then
			_info "# Setting root password"
			_sudo usermod -p "$password" $username
		fi
	fi
	_users_configure
	_users_cleanup
}
_users_get_data() {
	printf '%s\n' "$username" | tr ' ' '\n'
}
_users_cleanup() {
	unset user_options username gid grouplist shell uid password system
}
_users_configure() {
	local user_home=$(grep "^$username:" /etc/passwd | cut -f6 -d':')
	sudo=$SUDO_CMD _prepare_ssh_conf $user_home $username
	local original_pwd=$PWD
	cd /tmp
	if [ -n "$system" ]; then
		_warn "$username is a system user, bypassing configuration"
	else
		_warn "_CONF_FREEBSD_INSTALLER_HOSTNAME:$_CONF_FREEBSD_INSTALLER_HOSTNAME"
		_WARN_ON_ERROR=1 _NON_INTERACTIVE=1 _FREEBSD_INSTALLER=1 _NO_WRITE_STDERR=1 _SUDO_REQUIRED=1 _ _sudo \
			--preserve-env=_CONF_GIT_MIRROR,_WARN_ON_ERROR,_LOG_TARGET,_NON_INTERACTIVE,_CONF_FREEBSD_INSTALLER_HOSTNAME,_NO_WRITE_STDERR,http_proxy,https_proxy \
			-H -u $username conf restore || _user_configure_debug
	fi
	cd $original_pwd
}
_user_configure_debug() {
	_warn "Error restoring configuration for $username"
	cat $user_home/.ssh/id_*.pub
	cat $user_home/.ssh/authorized_keys
	cat $user_home/.ssh/config
}
_app_install() {
	_DEPENDENCY=1 app-install $1
}
_app_uninstall() {
	app-uninstall $1
}
_app_is_installed() {
	[ -e $_CONF_INSTALL_LIBRARY_PATH/.metadata ] && return 0
	return 1
}
_app_is_file() {
	return 1
}
_expect_install() {
	$1 >/dev/null 2>&1
}
_expect_uninstall() {
	_warn "expect uninstall - Not implemented"
}
_expect_is_installed() {
	return 1
}
_expect_is_file() {
	return 0
}
_go_bootstrap() {
	_go_bootstrap_is_go_available || {
		_go_bootstrap_platform
		_go_bootstrap_is_go_available || _GO_DISABLED=1
	}
}
_go_bootstrap_is_go_available() {
	which go >/dev/null 2>&1
}
_go_install() {
	GO111MODULE=on _sudo go install $_GO_OPTIONS "$@" || {
		_warn "go install failed: $_GO_OPTIONS $@"
		_warn "  http_proxy: $http_proxy"
		_warn "  git  proxy: $(git config --global http.proxy)"
	}
}
_go_update() {
	:
}
_go_uninstall() {
	_sudo go uninstall "$@"
}
_go_is_installed() {
	return 1
}
_go_is_file() {
	return 1
}
_npm_bootstrap() {
	_npm_bootstrap_is_npm_available || {
		_npm_bootstrap_platform
		_npm_bootstrap_is_npm_available || _NPM_DISABLED=1
	}
	_npm_setup_proxy
}
_npm_bootstrap_is_npm_available() {
	which npm >/dev/null 2>&1
}
_npm_install() {
	local npm_package
	for npm_package in "$@"; do
		_npm_is_installed $npm_package || _sudo npm install -s -g "$npm_package"
	done
}
_npm_uninstall() {
	_sudo npm uninstall -s -g "$@"
}
_npm_is_installed() {
	npm list -g $1 >/dev/null
}
_npm_is_file() {
	return 1
}
_npm_setup_proxy() {
	if [ -n "$http_proxy" ]; then
		_warn "Configuring NPM to use an HTTP proxy: $http_proxy"
		npm config set proxy $http_proxy
		npm config set https-proxy $https_proxy
		_defer _npm_clear_proxy
	fi
}
_npm_clear_proxy() {
	_warn "Reverting NPM HTTP proxy: $http_proxy"
	npm config rm proxy
	npm config rm https-proxy
}
_package_bootstrap() {
	[ -z "$_INSTALL_INSTALLER" ] && return 1
	_${_INSTALL_INSTALLER}_bootstrap_is_${_INSTALL_INSTALLER}_available || {
		_${_INSTALL_INSTALLER}_bootstrap_platform
		_${_INSTALL_INSTALLER}_bootstrap_is_${_INSTALL_INSTALLER}_available || _PACKAGE_DISABLED=1
	}
	_${_INSTALL_INSTALLER}_bootstrap
}
_package_bootstrap_is_package_available() {
	[ -z "$_INSTALL_INSTALLER" ] && return 1
	_${_INSTALL_INSTALLER}_bootstrap_is_package_available
}
_package_install() {
	_package_validate_conf || return $?
	local packages
	local package
	for package in "$@"; do
		_package_is_installed $package || {
			if [ -n "$packages" ]; then
				packages="$packages $package"
			else
				packages="$package"
			fi
		}
	done
	if [ -n "$packages" ]; then
		_${_INSTALL_INSTALLER}_install "$packages"
	fi
}
_package_update() {
	_package_validate_conf || return $?
	[ -n "$_PACKAGE_UPDATES_DISABLED" ] && {
		_warn "$_INSTALL_INSTALLER updates are disabled"
		return 1
	}
	_info "Updating via ${_INSTALL_INSTALLER}"
	_${_INSTALL_INSTALLER}_update
}
_package_uninstall() {
	_package_validate_conf || return $?
	_${_INSTALL_INSTALLER}_uninstall "$@"
}
_package_validate_conf() {
	_package_enabled || {
		if [ -n "$_INSTALL_INSTALLER" ]; then
			_warn "$_INSTALL_INSTALLER is disabled"
		else
			_warn "_INSTALL_INSTALLER is unset"
		fi
		return 1
	}
	_require "$_INSTALL_INSTALLER" _INSTALL_INSTALLER
}
_package_is_installed() {
	_require "$_INSTALL_INSTALLER" _INSTALL_INSTALLER
	_${_INSTALL_INSTALLER}_is_installed "$@"
}
_package_is_file() {
	return 1
}
_package_enabled() {
	if [ -z "$_PACKAGE_DISABLED" ] || [ $_PACKAGE_DISABLED -eq 0 ]; then
		return 0
	fi
	return 1
}
_pypi_bootstrap() {
	_pypi_bootstrap_is_pypi_available || {
		_pypi_bootstrap_platform
		_pypi_bootstrap_is_pypi_available || _PYPI_DISABLED=1
	}
}
_pypi_bootstrap_is_pypi_available() {
	which pip >/dev/null 2>&1
}
_pypi_install() {
	_sudo pip install -U --no-input "$@" >/dev/null
}
_pypi_uninstall() {
	_sudo pip uninstall -y "$@" >/dev/null
}
_pypi_is_installed() {
	_error "PIP - is installed - NOT IMPLEMENTED"
}
_pypi_is_file() {
	return 1
}
_run_install() {
	sh $1
}
_run_uninstall() {
	_warn "run uninstall - Not implemented"
}
_run_is_installed() {
	return 1
}
_run_is_file() {
	return 0
}
_rust_bootstrap() {
	_rust_bootstrap_is_rust_available || {
		_rust_bootstrap_platform
		_rust_bootstrap_is_rust_available || _RUST_DISABLED=1
	}
}
_rust_bootstrap_is_rust_available() {
	which cargo >/dev/null 2>&1
}
_rust_install() {
	_sudo cargo install "$@"
}
_rust_update() {
	_sudo cargo update "$@"
}
_rust_uninstall() {
	_sudo cargo uninstall "$@"
}
_rust_is_installed() {
	_error "RUST - is installed - NOT IMPLEMENTED"
}
_rust_is_file() {
	return 1
}
_user_bootstrap() {
	:
}
_user_install() {
	:
}
_user_uninstall() {
	:
}
_user_is_installed() {
	return 1
}
_user_is_file() {
	return 0
}
_user_enabled() {
	return 1
}
_settings_init() {
	if [ -z "$_ROOT" ]; then
		_ROOT=/
	fi
	_ROOT=$(_readlink $_ROOT)
	_info "Using root directory: $_ROOT"
	_INSTALL_BIN_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_BIN_PATH)
	_INSTALL_CONFIG_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_CONFIG_PATH)
	_INSTALL_DATA_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_DATA_PATH)
	_INSTALL_LIBRARY_PATH=$(_USE_SUDO=1 _readlink $_ROOT/$_CONF_INSTALL_LIBRARY_PATH)
	_APPLICATION_METADATA_PATH=$_INSTALL_LIBRARY_PATH/install/.metadata
	_include $_APPLICATION_METADATA_PATH
	if [ "$_ROOT" != "/" ]; then
		unset $(env | grep _BOOTSTRAP | cut -f1 -d=)
	fi
}
_application_settings() {
	_TARGET_APPLICATION_BUILD_DATE=$(git log --format=%cd -1)
	_TARGET_APPLICATION_INSTALL_DATE=$(date +"%a %b %d %H:%M:%S %Y %z")
	_TARGET_APPLICATION_DATA_PATH=$_INSTALL_DATA_PATH/$_TARGET_APPLICATION_NAME
	_TARGET_APPLICATION_CONFIG_PATH="$_INSTALL_CONFIG_PATH/$_TARGET_APPLICATION_NAME"
	_TARGET_APPLICATION_METADATA_PATH=$_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.metadata
	_TARGET_APPLICATION_GIT_URL=$(git remote -v | awk {'print$2'} | head -1)
	mkdir -p $_INSTALL_DATA_PATH/install $_CONF_INSTALL_DATA_PATH $_TARGET_APPLICATION_DATA_PATH
	_include $_TARGET_APPLICATION_CONFIG_PATH
}
_application_defaults() {
	local default_file
	for default_file in $(find $1/defaults -type f 2>/dev/null); do
		_include $default_file
	done
}
_require_file() {
	if [ -z "$1" ]; then
		_error "Filename is missing ($_FILE_DETAIL_MESSAGE)"
	fi
	if [ ! -e $1 ]; then
		if [ $# -eq 2 ]; then
			_warn "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
			return 1
		fi
		_error "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
	fi
}
_readlink() {
	if [ $# -lt 1 ] || [ -z "$1" ]; then
		return 1
	fi
	if [ "$1" = "/" ]; then
		printf '%s\n' "$1"
		return
	fi
	if [ ! -e $1 ]; then
		if [ -z $_MKDIR ] || [ $_MKDIR -eq 1 ]; then
			local sudo
			if [ -n "$_USE_SUDO" ]; then
				sudo=$_SUDO_CMD
			fi
			$sudo mkdir -p $1 >/dev/null 2>&1
		fi
	fi
	readlink -f $1
}
_uninstall() {
	_require "$_TARGET_APPLICATION_NAME" "_TARGET_APPLICATION_NAME must be set"
	_require "$_INSTALL_LIBRARY_PATH" "_INSTALL_LIBRARY_PATH must be set"
	[ ! -e $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME ] && return 1
	[ ! -e $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.metadata ] && return 1
	_uninstall_script
	_uninstall_files
	_uninstall_type
	_sudo rm -Rf $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME
	_info "Uninstalled $_TARGET_APPLICATION_NAME"
}
_uninstall_script() {
	if [ -e $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/uninstall ]; then
		find $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/uninstall -type f -exec _sudo {} \;
	fi
}
_uninstall_files() {
	if [ -e $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files ]; then
		if [ "$_ROOT" = "/" ]; then
			_sudo rm -f $(cat $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files)
		else
			local sed_safe_root=$(_sed_safe $_ROOT)
			_sudo rm -f $(sed -e "s/^/$sed_safe_root/" $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files)
		fi
		_sudo rm -f $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/.files
	fi
}
_uninstall_type() {
	if [ ! -e $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/type ]; then
		return 1
	fi
	for _SETUP_TYPE_FILE in $(find $_INSTALL_LIBRARY_PATH/$_TARGET_APPLICATION_NAME/type -type f -name '.*'); do
		_SETUP_TYPE_NAME=$(basename $_SETUP_TYPE_FILE | sed -e 's/^.//')
		_uninstall_type_do
	done
}
_uninstall_type_do() {
	local packages=$($_CONF_INSTALL_GNU_GREP -Pv '(^$|^#)' $_SETUP_TYPE_FILE)
	if [ -z "$packages" ]; then
		_detail "No ${_SETUP_TYPE_NAME}(s) to uninstall"
		return
	fi
	_info "Uninstalling $packages via ${_SETUP_TYPE_NAME}"
	_${_SETUP_TYPE_NAME}_uninstall $packages
}
: ${_CONF_INSTALL_BEEP_TIMEOUT:=5}
: ${_CONF_INSTALL_BEEP_ERR:='L32c'}
: ${_CONF_INSTALL_BEEP_ALRT:='L32f'}
: ${_CONF_INSTALL_BEEP_SCS:='L32a'}
: ${_CONF_INSTALL_BEEP_WRN:=''}
: ${_CONF_INSTALL_BEEP_INFO:=''}
: ${_CONF_INSTALL_BEEP_DETAIL:=''}
: ${_CONF_INSTALL_BEEP_DEBUG:=''}
: ${_CONF_INSTALL_BEEP_STDIN:='L32ab'}
_PLATFORM="Linux"
: ${_CONF_INSTALL_GNU_GREP:=grep}
: ${_CONF_INSTALL_GNU_SED:=sed}
_ARCHITECTURE=$(uname -m)
_SUDO_CMD="sudo"
_PLATFORM_PACKAGES="git expect curl shfmt"
_NPM_PACKAGE="node"
_RUST_PACKAGE="rust"
_PYPI_PACKAGE="python"
_GO_PACKAGE="go"
: ${_CONF_INSTALL_SUDO_BEEP_TONE:=L32aL8fL32c}
: ${_CONF_INSTALL_STAT_ARGUMENTS:='-f %OLp'}
_SUB_PLATFORM=$(grep '^NAME=.*' /etc/os-release | sed -e 's/^NAME=//' -e 's/ Linux//' | tr -d '"')
case $_SUB_PLATFORM in
Gentoo)
	_INSTALL_INSTALLER=emerge
	;;
Ubuntu | Debian)
	_INSTALL_INSTALLER=apt
	;;
CentOS | RedHat)
	_INSTALL_INSTALLER=yum
	;;
Alpine)
	_INSTALL_INSTALLER=apk
	_CONF_INSTALL_STAT_ARGUMENTS='-c %a'
	_CONF_INSTALL_GNU_GREP=ugrep
	_is_backgrounded() {
		:
	}
	;;
*)
	_error "Unsupported Linux Distribution: $_SUB_PLATFORM"
	;;
esac
: ${_CONF_INSTALL_CONTEXT:=$_CONSOLE_CONTEXT_ID}
: ${_CONF_INSTALL_CONTEXT:=default}
: ${_CONF_INSTALL_C_ALRT:="1;31m"}
: ${_CONF_INSTALL_C_ERR:="1;31m"}
: ${_CONF_INSTALL_C_SCS:="1;32m"}
: ${_CONF_INSTALL_C_WRN:="1;33m"}
: ${_CONF_INSTALL_C_INFO:="1;36m"}
: ${_CONF_INSTALL_C_DETAIL:="1;0;36m"}
: ${_CONF_INSTALL_C_DEBUG:="1;35m"}
: ${_CONF_INSTALL_C_STDIN:="1;34m"}
: ${_CONF_INSTALL_DATE_FORMAT:="%Y/%m/%d|%H:%M:%S"}
: ${_CONF_INSTALL_DATE_TIME_FORMAT:="%Y/%m/%d %H:%M:%S"}
: ${_CONF_INSTALL_AUDIT:=0}
: ${_CONF_INSTALL_LOG_LEVEL:=2}
: ${_CONF_INSTALL_INDENT:="  "}
: ${_CONF_INSTALL_CONF_VALIDATION_FUNCTION:=_warn}
: ${_CONF_INSTALL_WAITER_LEVEL:=_debug}
if [ -z "$_NON_INTERACTIVE" ]; then
	if [ -z "$_FORCE_INTERACTIVE" ]; then
		tty >/dev/null || _NON_INTERACTIVE=0
	fi
fi
if ! (: >&7) 2>/dev/null; then
	exec 7>&1
	exec 8>&2
fi
if [ $_NON_INTERACTIVE ]; then
	_LOG_TARGET=7
	_NLOG_TARGET=1
else
	_LOG_TARGET=8
	_NLOG_TARGET=2
fi
: ${_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL:=warn}
: ${_CONF_INSTALL_WAIT_INTERVAL:=30}
: ${_CONF_INSTALL_NO_PAGER:=0}
: ${_CONF_INSTALL_STEP_TIMEOUT:=300}
: ${_CONF_INSTALL_IOSTAT_DURATION:=5}
: ${_CONF_INSTALL_REPOSITORY_URL:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_MIRROR_URLS:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_SUDO_TIMEOUT:=270}
: ${_CONF_INSTALL_NETWORK_TEST_TARGET:=google.com}
: ${_CONF_INSTALL_NETWORK_TEST_TIMEOUT:=5}
: ${_CONF_INSTALL_TEAMS_MESSAGE_PARALLELIZATION:=5}
: ${_CONF_INSTALL_PARALLEL_BUILD:=8}
: ${_CONF_INSTALL_APP_REGISTRY_GIT_URL:=https://github.com/walterjwhite/app.registry.git}
: ${_CONF_INSTALL_AUTO_UPDATE_PACKAGES:=0}
: ${_CONF_INSTALL_CLEAN_APP_REGISTRY_WORKSPACE:=1}
: ${_CONF_INSTALL_RANDOM_DEFAULT_LENGTH:=8}
[ "$_CONF_INSTALL_NO_PAGER" = "1" ] && PAGER=cat
: ${_OPTN_INSTALL_BYPASS_UNINSTALL:=1}
[ "$HOME" = "/" ] && HOME=/root
: ${_CONF_INSTALL_SYSTEM_TEMPLATE_PATH:=/usr/share/git/templates}
: ${_CONF_INSTALL_LIBRARY_PATH:=/usr/local/walterjwhite}
: ${_CONF_INSTALL_BIN_PATH:=/usr/local/bin}
: ${_CONF_INSTALL_DATA_PATH:=$HOME/.data}
: ${_CONF_INSTALL_CACHE_PATH:=$_CONF_INSTALL_DATA_PATH/.cache}
: ${_CONF_INSTALL_CONFIG_PATH:=$HOME/.config/walterjwhite}
: ${_CONF_INSTALL_RUN_PATH:=/tmp/$USER/walterjwhite/app}
_CONF_INSTALL_DATA_ARTIFACTS_PATH=$_CONF_INSTALL_DATA_PATH/install/artifacts
_CONF_INSTALL_DATA_REGISTRY_PATH=$_CONF_INSTALL_DATA_PATH/install/registry
_CONF_INSTALL_APPLICATION_DATA_PATH=$_CONF_INSTALL_DATA_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_CONFIG_PATH=$_CONF_INSTALL_CONFIG_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_LIBRARY_PATH=$_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME
: ${INSTALL_SUPPORTED_PLATFORMS:="FreeBSD Linux Windows Apple"}
: ${INSTALL_BUILD_PLATFORMS:=$INSTALL_SUPPORTED_PLATFORMS}
which pgrep >/dev/null 2>&1 && _PARENT_PROCESSES_FUNCTION=_parent_processes_pgrep
_DETECTED_PLATFORM=$(uname)
case $_DETECTED_PLATFORM in
Darwin)
	_DETECTED_PLATFORM=Apple
	;;
MINGW64_NT-*)
	_DETECTED_PLATFORM=Windows
	;;
esac
_is_backgrounded && _BACKGROUNDED=1
_init_logging
[ "$_APPLICATION_NAME" != "install" ] && _include $_CONF_INSTALL_CONFIG_PATH/install
_include $_CONF_INSTALL_APPLICATION_CONFIG_PATH
unset _DEFERS
_APPLICATION_START_TIME=$(date +%s)
_APPLICATION_CMD=$(basename $0)
[ -z "$_INSTALL_INSTALLER" ] && _PACKAGE_DISABLED=1
trap _on_exit INT 0 1 2 3 4 6 15
for _ARG in "$@"; do
	case $_ARG in
	-conf-* | -[a-z0-9][a-z0-9][a-z0-9]*)
		_configuration_name=${_ARG#*-}
		_configuration_name=${_configuration_name%%=*}
		if [ $(printf '%s' "$_configuration_name" | grep -c '_') -eq 0 ]; then
			if [ $(printf '%s' "$_configuration_name" | grep -c '^conf') -gt 0 ]; then
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/-/-$_APPLICATION_NAME-/")
			else
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/^/$_APPLICATION_NAME-/")
			fi
		fi
		_configuration_name=$(printf '%s' $_configuration_name | tr '-' '_' | tr '[:lower:]' '[:upper:]')
		if [ $(printf '%s' "$_ARG" | grep -c '=') -eq 0 ]; then
			_configuration_value=1
		else
			_configuration_value=${_ARG#*=}
		fi
		export _$_configuration_name="$_configuration_value"
		unset _configuration_name
		shift
		;;
	-h | --help)
		_print_help_and_exit
		;;
	-w=*)
		_WAITER_PID="${1#*=}"
		shift
		;;
	-w)
		_CONF_INSTALL_WAITER_LEVEL=_info
		_defer _waitee_done
		shift
		;;
	*)
		break
		;;
	esac
done
for _REQUIRED_APP_CONF_ITEM in $_REQUIRED_APP_CONF; do
	_variable_is_set $_REQUIRED_APP_CONF_ITEM || {
		_warn "$_REQUIRED_APP_CONF_ITEM is unset"
		_MISSING_REQUIRED_CONF=1
	}
done
[ -n "$_MISSING_REQUIRED_CONF" ] && _error "Required configuration is missing, please refer to above error(s)"
_ACTUAL_ARGUMENT_COUNT=$#
_DISCOVERED_ARGUMENT_COUNT=$(printf '%s' "$_REQUIRED_ARGUMENTS" | sed -e 's/$/\n/' | tr '|' '\n' | wc -l | awk {'print$1'})
_required_arguments_argument_log_level=debug
[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _required_arguments_argument_log_level=warn
_$_required_arguments_argument_log_level "Expecting $_DISCOVERED_ARGUMENT_COUNT, received $# arguments"
_ARG_INDEX=1
_ARGUMENT_LOG_LEVEL=info
while [ $_ARG_INDEX -le $_DISCOVERED_ARGUMENT_COUNT ]; do
	_ARGUMENT_NAME=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_ARG_INDEX}p | sed -e 's/:.*$//')
	_ARGUMENT_MESSAGE=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_ARG_INDEX}p | sed -e 's/^.*://')
	if [ -z "$1" ]; then
		_$_required_arguments_argument_log_level "$_ARG_INDEX:$_ARGUMENT_MESSAGE was not provided"
	else
		_$_required_arguments_argument_log_level "$_ARG_INDEX:$_ARGUMENT_NAME=$1"
		export $_ARGUMENT_NAME="$1"
		shift
	fi
	_ARG_INDEX=$(($_ARG_INDEX + 1))
done
[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _error "Missing arguments"
unset _ARG_INDEX _ARGUMENT_NAME _ARGUMENT_MESSAGE _required_arguments_argument_log_level
_DISCOVERED_REQUIRED_ARGUMENTS="$_REQUIRED_ARGUMENTS"
unset _REQUIRED_ARGUMENTS
_debug "REMAINING ARGS: $*"
if [ -z "$_CONTEXT_VALIDATED" ]; then
	_context_id_is_valid "$_CONF_INSTALL_CONTEXT"
	_CONTEXT_VALIDATED=0
fi
_APPLICATION_CONTEXT_GROUP=$_CONF_INSTALL_RUN_PATH/$_CONF_INSTALL_CONTEXT
_APPLICATION_CMD_DIR=$_APPLICATION_CONTEXT_GROUP/$_APPLICATION_NAME/$_APPLICATION_CMD
_waitee_init
_waiter
_settings_init
for _TARGET_APPLICATION_NAME in "$_APPLICATIONS"; do
	_uninstall
done
