#!/bin/sh
set -a
_git_save() {
	local _message="$1"
	shift
	if [ -n "$_PROJECT_PATH" ]; then
		cd $_PROJECT_PATH
	fi
	git add $@ 2>/dev/null
	git commit $@ -m "$_message"
	_has_remotes=$(git remote | wc -l)
	if [ "$_has_remotes" -gt "0" ]; then
		git push
	fi
}
_git_init() {
	if [ ! -e $_PROJECT_PATH/.git ]; then
		_timeout $_CONF_GIT_CLONE_TIMEOUT _git_init git clone "$_CONF_GIT_MIRROR/$_PROJECT" $_PROJECT_PATH || {
			if [ -z "$_WARN" ]; then
				_error "Unable to initialize project"
			fi
			_warn "Initialized empty project"
			git init $_PROJECT_PATH
		}
	fi
	cd $_PROJECT_PATH
}
_git_in_project_base_path() {
	_in_path $_PROJECT_BASE_PATH
}
_git_in_user_home() {
	_in_path $HOME
}
_git_in_working_directory() {
	git status >/dev/null 2>&1
}
_git_relative_path() {
	_HOME_SED_SAFE=$(_sed_safe $(_readlink $HOME))
	_PROJECT_RELATIVE_PATH=$(pwd | sed -e "s/$_HOME_SED_SAFE\///")
}
_require_file() {
	if [ -z "$1" ]; then
		_error "Filename is missing ($_FILE_DETAIL_MESSAGE)"
	fi
	if [ ! -e $1 ]; then
		if [ $# -eq 2 ]; then
			_warn "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
			return 1
		fi
		_error "File: $1 does not exist ($_FILE_DETAIL_MESSAGE)"
	fi
}
_readlink() {
	if [ $# -lt 1 ] || [ -z "$1" ]; then
		return 1
	fi
	if [ "$1" = "/" ]; then
		printf '%s\n' "$1"
		return
	fi
	if [ ! -e $1 ]; then
		if [ -z $_MKDIR ] || [ $_MKDIR -eq 1 ]; then
			local sudo
			if [ -n "$_USE_SUDO" ]; then
				sudo=$_SUDO_CMD
			fi
			$sudo mkdir -p $1 >/dev/null 2>&1
		fi
	fi
	readlink -f $1
}
_in_path() {
	_require "$1" _in_path
	local test_path=$(readlink -f $1)
	readlink -f $PWD | grep -c "^$test_path" >/dev/null 2>&1
}
_in_application_data_path() {
	_in_path $_CONF_INSTALL_APPLICATION_DATA_PATH
}
_in_data_path() {
	_in_path $_CONF_INSTALL_DATA_PATH
}
_remove_empty_directories() {
	find $1 -type d -empty -exec rm -rf {} +
}
_sed_safe() {
	printf '%s' $1 | sed -e "s/\//\\\\\//g"
}
_time_seconds_to_human_readable() {
	_HUMAN_READABLE_TIME=$(printf '%02d:%02d:%02d' $(($1 / 3600)) $(($1 % 3600 / 60)) $(($1 % 60)))
}
_time_human_readable_to_seconds() {
	case $1 in
	*w)
		_TIME_IN_SECONDS=${1%%w}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8 * 5))
		;;
	*d)
		_TIME_IN_SECONDS=${1%%d}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8))
		;;
	*h)
		_TIME_IN_SECONDS=${1%%h}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600))
		;;
	*m)
		_TIME_IN_SECONDS=${1%%m}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 60))
		;;
	*s)
		_TIME_IN_SECONDS=${1%%s}
		;;
	*)
		_error "$1 was not understood"
		;;
	esac
}
_time_decade() {
	local year=$(date +%Y)
	local _end_year=$(printf '%s' $year | head -c 4 | tail -c 1)
	local _event_decade_prefix=$(printf '%s' "$year" | $_CONF_INSTALL_GNU_GREP -Po "[0-9]{3}")
	if [ "$_end_year" -eq "0" ]; then
		_event_decade_start=${_event_decade_prefix}
		_event_decade_start=$(printf '%s' "$_event_decade_start-1" | bc)
		_event_decade_end=${_event_decade_prefix}0
	else
		_event_decade_start=$_event_decade_prefix
		_event_decade_end=$_event_decade_prefix
		_event_decade_end=$(printf '%s' "$_event_decade_end+1" | bc)
		_event_decade_end="${_event_decade_end}0"
	fi
	_event_decade_start=${_event_decade_start}1
	printf '%s-%s' "$_event_decade_start" "$_event_decade_end"
}
_current_time() {
	date +$_CONF_INSTALL_DATE_TIME_FORMAT
}
_current_time_unix_epoch() {
	date +%s
}
_timeout() {
	local timeout=$1
	shift
	local message=$1
	shift
	local timeout_units='s'
	if [ $(printf '%s' "$timeout" | grep -c '[smhd]{1}') -gt 0 ]; then
		unset timeout_units
	fi
	local timeout_level=error
	if [ $_WARN ]; then
		timeout_level=warn
	fi
	local sudo_prefix
	if [ -n "$_USE_SUDO" ] && [ -n "$_SUDO_CMD" ]; then
		if [ -z "$_NON_INTERACTIVE" ]; then
			$_SUDO_CMD -n ls >/dev/null 2>&1 || _sudo_precmd "$@"
		fi
		[ -z "$USER" ] && USER=$(whoami)
		[ "$USER" != "root" ] && {
			sudo_prefix=$_SUDO_CMD
			[ $_PRESERVE_ENV ] && sudo_prefix="$sudo_prefix -E"
		}
	fi
	$sudo_prefix timeout $_OPTIONS $timeout "$@" || {
		local error_status=$?
		local error_message="Other error"
		if [ $error_status -eq 124 ]; then
			error_message="Timed Out"
		fi
		[ $_TIMEOUT_ERR_FUNCTION ] && $_TIMEOUT_ERR_FUNCTION
		_$timeout_level "_timeout: $error_message: ${timeout}${timeout_units} - $message ($error_status): $sudo_prefix timeout $_OPTIONS $timeout $* ($USER)"
		return $error_status
	}
}
_git_diff() {
	if [ $# -eq 0 ]; then
		_git-is-clean && _error "No changes"
	fi
	if [ "$(git log -1 2>/dev/null | grep commit | wc -l)" -gt "0" ]; then
		if [ $# -gt 0 ]; then
			git diff --unified -w "$@"
		else
			git diff HEAD --unified -w
		fi
	else
		find . -type f ! -path '*/.git/*' -exec $EDITOR {} \;
	fi
}
if [ -z "$_GIT_RECURSIVE" ]; then
	_git_in_working_directory || {
		_GIT_RECURSIVE=1
		find . \( -type d -or -type f \) -and -name '.git' -execdir gd "$@" \;
		return
	}
fi
_git_diff "$@"
