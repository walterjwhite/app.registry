#!/bin/sh
set -a
_APPLICATION_NAME='system-maintenance'
_CONF_INSTALL_CRONTAB_ROOT_PATH=/bin:/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:/usr/local/sbin:/opt/bin
_CONF_INSTALL_CRONTAB_USER_PATH=/usr/local/bin:/usr/bin:/bin:/opt/bin
_PLATFORM="FreeBSD"
_TAR_ARGS=" -f - "
_SUDO_CMD="sudo"
_ARCHITECTURE=$(uname -m)
_INSTALL_INSTALLER=pkg
: ${_CONF_INSTALL_GNU_GREP:=/usr/local/bin/grep}
: ${_CONF_INSTALL_GNU_SED:=gsed}
_PLATFORM_PACKAGES="git gsed gnugrep gtar gawk"
_NPM_PACKAGE="npm"
_RUST_PACKAGE="rust"
_PYPI_DISABLED=1
_PYPI_PACKAGE="python39 py39-pip"
_GO_PACKAGE="go123"
GOPATH=/usr/local
PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin:/usr/local/sbin
: ${_CONF_INSTALL_SUDO_BEEP_TONE:=L32aL8fL32c}
_CONF_INSTALL_STAT_ARGUMENTS='-f %OLp'
_PACKAGE_OPTIONS="-yq"
: ${_CONF_INSTALL_CONTEXT:=$_CONSOLE_CONTEXT_ID}
: ${_CONF_INSTALL_CONTEXT:=default}
: ${_CONF_INSTALL_C_ALRT:="1;31m"}
: ${_CONF_INSTALL_C_ERR:="1;31m"}
: ${_CONF_INSTALL_C_SCS:="1;32m"}
: ${_CONF_INSTALL_C_WRN:="1;33m"}
: ${_CONF_INSTALL_C_INFO:="1;36m"}
: ${_CONF_INSTALL_C_DETAIL:="1;0;36m"}
: ${_CONF_INSTALL_C_DEBUG:="1;35m"}
: ${_CONF_INSTALL_C_STDIN:="1;34m"}
: ${_CONF_INSTALL_DATE_FORMAT:="%Y/%m/%d|%H:%M:%S"}
: ${_CONF_INSTALL_DATE_TIME_FORMAT:="%Y/%m/%d %H:%M:%S"}
: ${_CONF_INSTALL_BEEP_TIMEOUT:=5}
: ${_CONF_INSTALL_BEEP_ERR:='L32c'}
: ${_CONF_INSTALL_BEEP_ALRT:='L32f'}
: ${_CONF_INSTALL_BEEP_SCS:='L32a'}
: ${_CONF_INSTALL_BEEP_WRN:=''}
: ${_CONF_INSTALL_BEEP_INFO:=''}
: ${_CONF_INSTALL_BEEP_DETAIL:=''}
: ${_CONF_INSTALL_BEEP_DEBUG:=''}
: ${_CONF_INSTALL_BEEP_STDIN:='L32ab'}
: ${_CONF_INSTALL_AUDIT:=0}
: ${_CONF_INSTALL_LOG_LEVEL:=2}
: ${_CONF_INSTALL_INDENT:="  "}
: ${_CONF_INSTALL_CONF_VALIDATION_FUNCTION:=_warn}
: ${_CONF_INSTALL_WAITER_LEVEL:=_debug}
if [ -z "$_NON_INTERACTIVE" ]; then
	if [ -z "$_FORCE_INTERACTIVE" ]; then
		tty >/dev/null || _NON_INTERACTIVE=0
	fi
fi
if ! (: >&7) 2>/dev/null; then
	exec 7>&1
	exec 8>&2
fi
if [ $_NON_INTERACTIVE ]; then
	_LOG_TARGET=7
	_NLOG_TARGET=1
else
	_LOG_TARGET=8
	_NLOG_TARGET=2
fi
: ${_CONF_INSTALL_FEATURE_TIMEOUT_ERROR_LEVEL:=warn}
: ${_CONF_INSTALL_WAIT_INTERVAL:=30}
: ${_CONF_INSTALL_NO_PAGER:=0}
: ${_CONF_INSTALL_STEP_TIMEOUT:=300}
: ${_CONF_INSTALL_IOSTAT_DURATION:=5}
: ${_CONF_INSTALL_REPOSITORY_URL:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_MIRROR_URLS:=https://github.com/walterjwhite}
: ${_CONF_INSTALL_SUDO_TIMEOUT:=270}
: ${_CONF_INSTALL_NETWORK_TEST_TARGET:=google.com}
: ${_CONF_INSTALL_NETWORK_TEST_TIMEOUT:=5}
: ${_CONF_INSTALL_TEAMS_MESSAGE_PARALLELIZATION:=5}
: ${_CONF_INSTALL_PARALLEL_BUILD:=8}
: ${_CONF_INSTALL_APP_REGISTRY_GIT_URL:=https://github.com/walterjwhite/app.registry.git}
: ${_CONF_INSTALL_AUTO_UPDATE_PACKAGES:=1}
: ${_CONF_INSTALL_CLEAN_APP_REGISTRY_WORKSPACE=1}
: ${_CONF_INSTALL_RANDOM_DEFAULT_LENGTH=8}
if [ "$HOME" = "/" ]; then
	HOME=/root
fi
: ${_CONF_INSTALL_SYSTEM_TEMPLATE_PATH:=/usr/share/git/templates}
: ${_CONF_INSTALL_LIBRARY_PATH:=/usr/local/walterjwhite}
: ${_CONF_INSTALL_BIN_PATH:=/usr/local/bin}
: ${_CONF_INSTALL_DATA_PATH:=$HOME/.data}
: ${_CONF_INSTALL_CACHE_PATH:=$_CONF_INSTALL_DATA_PATH/.cache}
: ${_CONF_INSTALL_CONFIG_PATH:=$HOME/.config/walterjwhite}
: ${_CONF_INSTALL_RUN_PATH:=/tmp/$USER/walterjwhite/app}
_CONF_INSTALL_DATA_ARTIFACTS_PATH=$_CONF_INSTALL_DATA_PATH/install/artifacts
_CONF_INSTALL_DATA_REGISTRY_PATH=$_CONF_INSTALL_DATA_PATH/install/registry
_CONF_INSTALL_APPLICATION_DATA_PATH=$_CONF_INSTALL_DATA_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_CONFIG_PATH=$_CONF_INSTALL_CONFIG_PATH/$_APPLICATION_NAME
_CONF_INSTALL_APPLICATION_LIBRARY_PATH=$_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME
which pgrep >/dev/null 2>&1 && _PARENT_PROCESSES_FUNCTION=_parent_processes_pgrep
_DETECTED_PLATFORM=$(uname)
case $_DETECTED_PLATFORM in
Darwin)
	_DETECTED_PLATFORM=Apple
	;;
MINGW64_NT-*)
	_DETECTED_PLATFORM=Windows
	;;
esac
[ $_APP_INSTALLATION ] || {
	_CONF_INSTALL_AUDIT=1
}
: ${_CONF_SYSTEM_MAINTENANCE_NETWORK_RETRIES:=3}
: ${_CONF_SYSTEM_MAINTENANCE_NETWORK_BACKOFF_TIME:=30}
: ${_CONF_SYSTEM_MAINTENANCE_NETWORK_TARGET:=google.com}
: ${_FEATURE_HOST_DISABLED:=$(sysctl -n security.jail.jailed)}
: ${_CONF_SYSTEM_MAINTENANCE_BE_EXPIRATION_PERIOD:=2592000}
: ${_CONF_SYSTEM_MAINTENANCE_JAIL_SNAPSHOT_EXPIRATION_PERIOD:=2592000}
: ${_CONF_SYSTEM_MAINTENANCE_MAX_BE_TO_KEEP:=5}
: ${_CONF_SYSTEM_MAINTENANCE_MAX_JAIL_SNAPSHOT_TO_KEEP:=5}
: ${_CONF_SYSTEM_MAINTENANCE_REBOOT:=0}
: ${_CONF_SYSTEM_MAINTENANCE_MAX_PATCHES:=100}
_beep() {
	if [ -n "$_BEEPING" ]; then
		_debug "Another 'beep' is in progress"
		return 1
	fi
	_BEEPING=1
	_do_beep "$@" &
}
_do_beep() {
	if [ -e /dev/speaker ]; then
		printf '%s' "$1" >/dev/speaker
	fi
	unset _BEEPING
}
_sudo_precmd() {
	_beep $_CONF_INSTALL_SUDO_BEEP_TONE
}
_interactive_alert() {
	which notify-send >/dev/null 2>&1 || return 1
	[ $XAUTHORITY ] && notify-send -e "$*"
}
_mktemp() {
	mktemp -t ${_APPLICATION_NAME}.${_APPLICATION_CMD}.$1
}
_notify() {
	local title=$1
	local message=$2
	zenity --info --text="$_APPLICATION_NAME - $_APPLICATION_CMD - $title\n$message"
}
_open() {
	xdg-open $1
	sleep 1
}
_is_backgrounded() {
	case $(ps -o stat= -p $$) in
	*+*)
		return 1
		;;
	esac
	return 0
}
_list_pid_info() {
	_TARGET_PID=$(basename $_EXISTING_APPLICATION_PIPE)
	_TARGET_PS_DTL=$(ps -o command -p $_TARGET_PID | sed 1d | sed -e "s/^.*$_EXECUTABLE_NAME_SED_SAFE/$_EXECUTABLE_NAME_SED_SAFE/")
	_info " $_TARGET_PID - $_TARGET_PS_DTL"
}
_sudo() {
	[ $# -eq 0 ] && _error 'No arguments were provided to _sudo'
	[ $(whoami) == 'root' ] && [ -z $_SUDO_REQUIRED ] && {
		$@
		return
	}
	_require "$_SUDO_CMD" _SUDO_CMD
	if [ -z "$_NON_INTERACTIVE" ]; then
		$_SUDO_CMD -n ls >/dev/null 2>&1 || _sudo_precmd "$@"
	fi
	$_SUDO_CMD $_SUDO_OPTIONS "$@"
}
_syslog() {
	logger -i -t "$_APPLICATION_NAME.$_APPLICATION_CMD" "$1"
}
_variable_is_set() {
	[ $(env | grep "^$1=.*$" | wc -l) -gt 0 ] && return 0
	return 1
}
_has_required_conf() {
	if [ -n "$_REQUIRED_APP_CONF" ]; then
		for _REQUIRED_APP_CONF_ITEM in $(printf '%s' "$_REQUIRED_APP_CONF" | sed -e 's/$/\n/' | tr '|' '\n'); do
			_variable_is_set $_REQUIRED_APP_CONF_ITEM || {
				_warn "$_REQUIRED_APP_CONF_ITEM is unset"
				_MISSING_REQUIRED_CONF=1
			}
		done
		if [ -n "$_MISSING_REQUIRED_CONF" ]; then
			_error "Required configuration is missing, please refer to above error(s)"
		fi
	fi
}
_environment_filter() {
	grep '^_CONF_'
}
_environment_dump() {
	if [ -z "$_APPLICATION_PIPE_DIR" ]; then
		return
	fi
	if [ -z "$_ENVIRONMENT_FILE" ]; then
		_ENVIRONMENT_FILE=$_APPLICATION_PIPE_DIR/environment
	fi
	mkdir -p $(dirname $_ENVIRONMENT_FILE)
	env | _environment_filter | sort -u | grep -v '^$' | sed -e 's/=/="/' -e 's/$/"/' >>$_ENVIRONMENT_FILE
}
_environment_load() {
	if [ -n "$_ENVIRONMENT_FILE" ]; then
		if [ -e "$_ENVIRONMENT_FILE" ]; then
			. $_ENVIRONMENT_FILE 2>/dev/null
		else
			_warn "$_ENVIRONMENT_FILE does not exist!"
		fi
	fi
}
_is_feature() {
	printf '%s' $_SETUP | grep -c /feature/
}
_disable_feature() {
	if [ -z "$_FEATURE_DISABLED" ]; then
		_warn "Error installing feature: $_FEATURE ($1)"
	fi
	printf '%s\n' $(_feature_key $1)_DISABLED=1 | _metadata_write
}
_is_feature_enabled() {
	local _feature_key=$(_feature_key $1)
	if [ $(env | grep -c "^${_feature_key}_DISABLED=1$") -gt 0 ]; then
		_warn "$1 is disabled"
		return 1
	fi
	return 0
}
_feature_key() {
	printf '%s\n' "_FEATURE_${1}" | tr '[:lower:]' '[:upper:]' | tr '-' '_'
}
_call() {
	local _function_name=$1
	shift
	type $_function_name >/dev/null 2>&1
	local _return=$?
	if [ $_return -gt 0 ]; then
		_debug "${_function_name} does not exist"
		return $_return
	fi
	$_function_name "$@"
}
_require() {
	local level=error
	if [ -z "$1" ]; then
		[ -n "$_WARN" ] && level=warn
		_$level "$2 required $_REQUIRE_DETAILED_MESSAGE" $3
		return 1
	fi
	unset _REQUIRE_DETAILED_MESSAGE
}
_read_if() {
	if [ $(env | grep -c "^$2=.*") -eq 1 ]; then
		_debug "$2 is already set"
		return 1
	fi
	[ $_NON_INTERACTIVE ] && _error "Running in non-interactive mode and user input was requested: $@" 10
	_print_log 9 STDI "$_CONF_INSTALL_C_STDIN" "$_CONF_INSTALL_BEEP_STDIN" "$1 $3"
	_interactive_alert_if $1 $3
	read -r $2
}
_interactive_alert_if() {
	_is_interactive_alert_enabled && _interactive_alert "$@"
}
_is_interactive_alert_enabled() {
	grep -cq '^_OPTN_INSTALL_INTERACTIVE_ALERT=1$' $_CONF_INSTALL_APPLICATION_CONFIG_PATH 2>/dev/null
}
_read_ifs() {
	stty -echo
	_read_if "$@"
	stty echo
}
_continue_if() {
	_read_if "$1" _PROCEED "$2"
	local proceed="$_PROCEED"
	unset _PROCEED
	if [ -z "$proceed" ]; then
		_DEFAULT=$(printf '%s' $2 | awk -F'/' {'print$1'})
		proceed=$_DEFAULT
	fi
	local proceed=$(printf '%s' "$proceed" | tr '[:lower:]' '[:upper:]')
	if [ $proceed = "N" ]; then
		return 1
	fi
	return 0
}
_() {
	local _successfulExitStatus=0
	if [ -n "$_SUCCESSFUL_EXIT_STATUS" ]; then
		_successfulExitStatus=$_SUCCESSFUL_EXIT_STATUS
		unset _SUCCESSFUL_EXIT_STATUS
	fi
	_info "## $*"
	if [ -z "$_DRY_RUN" ]; then
		"$@"
		local _exit_status=$?
		if [ $_exit_status -ne $_successfulExitStatus ]; then
			if [ -n "$_ON_FAILURE" ]; then
				$_ON_FAILURE
				return
			fi
			if [ -z "$_WARN_ON_ERROR" ]; then
				_error "Previous cmd failed" $_exit_status
			else
				unset _WARN_ON_ERROR
				_warn "Previous cmd failed - $* - $_exit_status"
				_ENVIRONMENT_FILE=$(mktemp -t error) _environment_dump
				return $_exit_status
			fi
		fi
	fi
}
_optional_include() {
	if [ ! -e $1 ]; then
		_debug "_optional_include: $1 does NOT exist"
		return 1
	fi
	. $1
}
_configure() {
	_optional_include $1
}
_error() {
	if [ $# -ge 2 ]; then
		_EXIT_STATUS=$2
	else
		_EXIT_STATUS=1
	fi
	_EXIT_LOG_LEVEL=4
	_EXIT_STATUS_CODE="ERR"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_ERR"
	_EXIT_BEEP="$_CONF_INSTALL_BEEP_ERR"
	_EXIT_MESSAGE="$1 ($_EXIT_STATUS)"
	_defer _environment_dump
	exit $_EXIT_STATUS
}
_success() {
	_EXIT_STATUS=0
	_EXIT_LOG_LEVEL=3
	_EXIT_STATUS_CODE="SCS"
	_EXIT_COLOR_CODE="$_CONF_INSTALL_C_SCS"
	_EXIT_BEEP="$_CONF_INSTALL_BEEP_SCS"
	_EXIT_MESSAGE="$1"
	exit 0
}
_contains_argument() {
	local _key=$1
	shift
	for _ARG in "$@"; do
		case $_ARG in
		$_key)
			return 0
			;;
		esac
	done
	return 1
}
_write() {
	_sudo tee -a "$1" >/dev/null
}
_value_in() {
	local level=error
	[ -n "$_WARN" ] && level=warn
	printf '%s\n' "$1" | $_CONF_INSTALL_GNU_GREP -Pcq "^($2)$" || _$level "$1 is not in ^($2)$"
}
_print_help() {
	if [ -e $2 ]; then
		_info "$1:"
		cat $2
		printf '\n'
	fi
}
_print_help_and_exit() {
	_print_help 'system-wide options' $_CONF_INSTALL_LIBRARY_PATH/install/help/default
	if [ "$_APPLICATION_NAME" != "install" ]; then
		_print_help $_APPLICATION_NAME $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME/help/default
		_print_help "$_APPLICATION_NAME/$_APPLICATION_CMD" $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME/help/$_APPLICATION_CMD
	fi
	exit 0
}
_init_logging() {
	unset _LOGFILE
	case $_CONF_INSTALL_LOG_LEVEL in
	0)
		local logfile=$(_mktemp debug)
		_warn "Writing debug contents to: $logfile"
		_set_logfile "$logfile"
		set -x
		;;
	esac
}
_set_logfile() {
	if [ -n "$1" ]; then
		_LOGFILE=$1
		mkdir -p $(dirname $1)
		exec >>$1
		exec 2>>$1
	fi
}
_reset_logging() {
	exec >&7
	exec 2>&8
}
_alert() {
	_print_log 5 ALRT "$_CONF_INSTALL_C_ALRT" "$_CONF_INSTALL_BEEP_ALRT" "$1"
	local recipients="$_OPTN_INSTALL_ALERT_RECIPIENTS"
	local subject="Alert: $0 - $1"
	if [ -z "$recipients" ]; then
		_warn "recipients is empty, aborting"
		return 1
	fi
	_mail "$recipients" "$subject" "$2"
}
_warn() {
	_print_log 3 WRN "$_CONF_INSTALL_C_WRN" "$_CONF_INSTALL_BEEP_WRN" "$1"
}
_info() {
	_print_log 2 INF "$_CONF_INSTALL_C_INFO" "$_CONF_INSTALL_BEEP_INFO" "$1"
}
_detail() {
	_print_log 2 DTL "$_CONF_INSTALL_C_DETAIL" "$_CONF_INSTALL_BEEP_DETAIL" "$1"
}
_debug() {
	_print_log 1 DBG "$_CONF_INSTALL_C_DEBUG" "$_CONF_INSTALL_BEEP_DEBUG" "($$) $1"
}
_do_log() {
	:
}
_colorize_text() {
	printf '\033[%s%s\033[0m' "$1" "$2"
}
_sed_remove_nonprintable_characters() {
	sed -e 's/[^[:print:]]//g'
}
_print_log() {
	if [ -z "$5" ]; then
		if test ! -t 0; then
			cat - | _sed_remove_nonprintable_characters |
				while read _line; do
					_print_log $1 $2 $3 $4 "$_line"
				done
			return
		fi
		return
	fi
	local _level=$1
	local _slevel=$2
	local _color=$3
	local _tone=$4
	local _message="$5"
	if [ $_level -lt $_CONF_INSTALL_LOG_LEVEL ]; then
		return
	fi
	[ -n "$_LOGGING_CONTEXT" ] && _message="$_LOGGING_CONTEXT - $_message"
	local _message_date_time=$(date +"$_CONF_INSTALL_DATE_FORMAT")
	if [ $_BACKGROUNDED ] && [ $_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD ]; then
		$_OPTN_INSTALL_BACKGROUND_NOTIFICATION_METHOD "$_slevel" "$_message" &
	fi
	_do_log "$_level" "$_slevel" "$_message"
	[ -n "$_tone" ] && _beep "$_tone"
	_log_to_file "$_slevel" "$_message_date_time" "${_LOG_INDENT}$_message"
	_log_to_console "$_color" "$_slevel" "$_message_date_time" "${_LOG_INDENT}$_message"
}
_add_logging_context() {
	if [ -z "$1" ]; then
		return 1
	fi
	if [ -z "$_LOGGING_CONTEXT" ]; then
		_LOGGING_CONTEXT="$1"
		return
	fi
	_LOGGING_CONTEXT="$_LOGGING_CONTEXT.$1"
}
_remove_logging_context() {
	if [ -z "$_LOGGING_CONTEXT" ]; then
		return 1
	fi
	case $_LOGGING_CONTEXT in
	*.*)
		_LOGGING_CONTEXT=$(printf '%s' "$_LOGGING_CONTEXT" | sed 's/\.[a-z0-9 _-]*$//')
		;;
	*)
		unset _LOGGING_CONTEXT
		;;
	esac
}
_increase_indent() {
	_LOG_INDENT="$_LOG_INDENT${_CONF_INSTALL_INDENT}"
}
_decrease_indent() {
	_LOG_INDENT=$(printf '%s' "$_LOG_INDENT" | sed -e "s/${_CONF_INSTALL_INDENT}$//")
	[ ${#_LOG_INDENT} -eq 0 ] && _reset_indent
}
_reset_indent() {
	unset _LOG_INDENT
}
_log_to_file() {
	if [ $_NON_INTERACTIVE ] || [ $_LOGFILE ]; then
		if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
			printf >&$_NLOG_TARGET '%s %s %s\n' "$1" "$2" "$3"
		else
			printf >&$_NLOG_TARGET '%s\n' "$3"
		fi
		_syslog "$3"
	fi
}
_log_to_console() {
	[ $_NO_WRITE_STDERR ] && return
	_is_open $_LOG_TARGET || return
	[ $_NON_INTERACTIVE ] && [ -z $_LOGFILE ] && return
	if [ $_CONF_INSTALL_AUDIT -gt 0 ]; then
		printf >&$_LOG_TARGET '\033[%s%s \033[0m%s %s\n' "$1" "$2" "$3" "$4"
	else
		printf >&$_LOG_TARGET '\033[%s%s \033[0m\n' "$1" "$4"
	fi
}
_is_open() {
	(: >&"$1") 2>/dev/null
}
_log_app() {
	_debug "$_APPLICATION_NAME:$_APPLICATION_CMD:$_APPLICATION_VERSION $_APPLICATION_BUILD_DATE / $_APPLICATION_INSTALL_DATE - $1 ($$)"
}
_mail() {
	if [ $# -lt 3 ]; then
		_warn "recipients[0], subject[1], message[2] is required - $# arguments provided"
		return 1
	fi
	local recipients=$(printf '%s' "$1" | tr '|' ' ')
	shift
	local subject="$1"
	shift
	local message="$1"
	shift
	printf "$message" | mail -s "$subject" $recipients
}
_time_seconds_to_human_readable() {
	_HUMAN_READABLE_TIME=$(printf '%02d:%02d:%02d' $(($1 / 3600)) $(($1 % 3600 / 60)) $(($1 % 60)))
}
_time_human_readable_to_seconds() {
	case $1 in
	*w)
		_TIME_IN_SECONDS=${1%%w}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8 * 5))
		;;
	*d)
		_TIME_IN_SECONDS=${1%%d}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600 * 8))
		;;
	*h)
		_TIME_IN_SECONDS=${1%%h}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 3600))
		;;
	*m)
		_TIME_IN_SECONDS=${1%%m}
		_TIME_IN_SECONDS=$(($_TIME_IN_SECONDS * 60))
		;;
	*s)
		_TIME_IN_SECONDS=${1%%s}
		;;
	*)
		_error "$1 was not understood"
		;;
	esac
}
_time_decade() {
	local year=$(date +%Y)
	local _end_year=$(printf '%s' $year | head -c 4 | tail -c 1)
	local _event_decade_prefix=$(printf '%s' "$year" | $_CONF_INSTALL_GNU_GREP -Po "[0-9]{3}")
	if [ "$_end_year" -eq "0" ]; then
		_event_decade_start=${_event_decade_prefix}
		_event_decade_start=$(printf '%s' "$_event_decade_start-1" | bc)
		_event_decade_end=${_event_decade_prefix}0
	else
		_event_decade_start=$_event_decade_prefix
		_event_decade_end=$_event_decade_prefix
		_event_decade_end=$(printf '%s' "$_event_decade_end+1" | bc)
		_event_decade_end="${_event_decade_end}0"
	fi
	_event_decade_start=${_event_decade_start}1
	printf '%s-%s' "$_event_decade_start" "$_event_decade_end"
}
_current_time() {
	date +$_CONF_INSTALL_DATE_TIME_FORMAT
}
_current_time_unix_epoch() {
	date +%s
}
_timeout() {
	local timeout=$1
	shift
	local message=$1
	shift
	local timeout_units='s'
	if [ $(printf '%s' "$timeout" | grep -c '[smhd]{1}') -gt 0 ]; then
		unset timeout_units
	fi
	local timeout_level=error
	if [ $_WARN ]; then
		timeout_level=warn
	fi
	local sudo_prefix
	if [ -n "$_USE_SUDO" ] && [ -n "$_SUDO_CMD" ]; then
		if [ -z "$_NON_INTERACTIVE" ]; then
			$_SUDO_CMD -n ls >/dev/null 2>&1 || _sudo_precmd "$@"
		fi
		[ -z "$USER" ] && USER=$(whoami)
		[ "$USER" != "root" ] && {
			sudo_prefix=$_SUDO_CMD
			[ $_PRESERVE_ENV ] && sudo_prefix="$sudo_prefix -E"
		}
	fi
	$sudo_prefix timeout $_OPTIONS $timeout "$@" || {
		local error_status=$?
		local error_message="Other error"
		if [ $error_status -eq 124 ]; then
			error_message="Timed Out"
		fi
		[ $_TIMEOUT_ERR_FUNCTION ] && $_TIMEOUT_ERR_FUNCTION
		_$timeout_level "_timeout: $error_message: ${timeout}${timeout_units} - $message ($error_status): $sudo_prefix timeout $_OPTIONS $timeout $* ($USER)"
		return $error_status
	}
}
_on_exit() {
	[ $_EXIT ] && return 1
	_EXIT=0
	if [ -n "$_DEFERS" ]; then
		for _DEFER in $_DEFERS; do
			_call $_DEFER
		done
		unset _DEFERS
	fi
	_waitee_done
	if [ $_EXIT_STATUS -gt 0 ]; then
		_log_level=warn
	else
		_log_level=debug
	fi
	[ "$_EXIT_MESSAGE" ] && _print_log $_EXIT_LOG_LEVEL "$_EXIT_STATUS_CODE" "$_EXIT_COLOR_CODE" "$_EXIT_BEEP" "$_EXIT_MESSAGE"
	_log_app exit
	_on_exit_beep
}
_defer() {
	_debug "deferring: $1"
	_DEFERS="${_DEFERS:+$_DEFERS }$1"
}
_on_exit_beep() {
	local current_time=$(date +%s)
	local timeout=$(($current_time + $_CONF_INSTALL_BEEP_TIMEOUT))
	[ $current_time -le $timeout ] && return 1
	local beep_code
	if [ $_EXIT_STATUS -gt 0 ]; then
		beep_code="$_CONF_INSTALL_BEEP_ERR"
	else
		beep_code="$_CONF_INSTALL_BEEP_SCS"
	fi
	_beep "$beep_code" &
}
_context_id_is_valid() {
	printf '%s' "$1" | $_CONF_INSTALL_GNU_GREP -Pq '^[a-zA-Z0-9_+-]+$' || _error "Context ID *MUST* only contain alphanumeric characters and +-: '^[a-zA-Z0-9_+-]+$' | ($1)"
}
_init_application_context() {
	if [ -z "$_CONTEXT_VALIDATED" ]; then
		_context_id_is_valid "$_CONF_INSTALL_CONTEXT"
		_CONTEXT_VALIDATED=0
	fi
	_APPLICATION_CONTEXT_GROUP=$_CONF_INSTALL_RUN_PATH/$_CONF_INSTALL_CONTEXT
	_APPLICATION_CMD_DIR=$_APPLICATION_CONTEXT_GROUP/$_APPLICATION_NAME/$_APPLICATION_CMD
	_APPLICATION_PIPE=$_APPLICATION_CMD_DIR/$$
	_APPLICATION_PIPE_DIR=$(dirname $_APPLICATION_PIPE)
	mkdir -p $_APPLICATION_PIPE_DIR
	mkfifo $_APPLICATION_PIPE
	_init_configuration
	$_CONF_INSTALL_WAITER_LEVEL "($_APPLICATION_CMD) Please use -w=$$"
}
_init_configuration() {
	if [ -z "$_CONFIGURATIONS" ]; then
		if [ "$_APPLICATION_NAME" != "install" ]; then
			_configure $_CONF_INSTALL_CONFIG_PATH/install
		fi
		_configure $_CONF_INSTALL_APPLICATION_CONFIG_PATH
		return 1
	fi
	local configure
	for configure in $(printf '%s\n' $_CONFIGURATIONS); do
		_configure $_CONF_INSTALL_CONFIG_PATH/$configure
	done
}
_has_other_instances() {
	if [ $(find $_APPLICATION_CMD_DIR -maxdepth 1 -type p ! -name $$ | wc -l) -gt 0 ]; then
		return 0
	fi
	return 1
}
_waitee_done() {
	if [ -z "$_EXIT_STATUS" ]; then
		_EXIT_STATUS=0
	fi
	if [ -n "$_WAITEE" ] && [ -e $_APPLICATION_PIPE ]; then
		_info "$0 process completed, notifying ($_EXIT_STATUS)"
		printf '%s\n' "$_EXIT_STATUS" >$_APPLICATION_PIPE
		_info "$0 downstream process picked up"
	fi
	rm -f $_APPLICATION_PIPE
}
_waiter() {
	if [ -n "$_WAITER_PID" ]; then
		_UPSTREAM_APPLICATION_PIPE=$(find $_APPLICATION_CONTEXT_GROUP -type p -name $_WAITER_PID 2>/dev/null | head -1)
		if [ -z "$_UPSTREAM_APPLICATION_PIPE" ]; then
			_error "$_WAITER_PID not found"
		fi
		if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
			_warn "$_UPSTREAM_APPLICATION_PIPE does not exist, did upstream start?"
			return
		fi
		_info "Waiting for upstream to complete: $_WAITER_PID"
		while [ 1 ]; do
			if [ ! -e $_UPSTREAM_APPLICATION_PIPE ]; then
				_error "Upstream pipe no longer exists"
			fi
			_UPSTREAM_APPLICATION_STATUS=$(_timeout $_CONF_INSTALL_WAIT_INTERVAL "_waiter:upstream" cat $_UPSTREAM_APPLICATION_PIPE 2>/dev/null)
			local _UPSTREAM_STATUS=$?
			if [ $_UPSTREAM_STATUS -eq 0 ]; then
				if [ -z "$_UPSTREAM_APPLICATION_STATUS" ] || [ $_UPSTREAM_APPLICATION_STATUS -gt 0 ]; then
					_error "Upstream exited with error ($_UPSTREAM_APPLICATION_STATUS)"
				fi
				_warn "Upstream finished: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
				break
			fi
			_detail " Upstream is still running: $_UPSTREAM_APPLICATION_PIPE ($_UPSTREAM_STATUS)"
		done
	fi
}
_kill_all() {
	_do_kill_all $_APPLICATION_PIPE_DIR
}
_kill_all_group() {
	_do_kill_all $_APPLICATION_CONTEXT_GROUP
}
_do_kill_all() {
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_kill $(basename $_EXISTING_APPLICATION_PIPE)
	done
}
_kill() {
	_warn "Killing $1"
	kill -TERM $1
}
_list() {
	_list_pid_infos $_APPLICATION_PIPE_DIR
}
_list_group() {
	_list_pid_infos $_APPLICATION_CONTEXT_GROUP
}
_list_pid_infos() {
	_info "Running processes:"
	_EXECUTABLE_NAME_SED_SAFE=$(_sed_safe $0)
	for _EXISTING_APPLICATION_PIPE in $(find $1 -type p -not -name $$); do
		_list_pid_info
	done
}
_parent_processes() {
	[ -n "$_PARENT_PROCESSES_FUNCTION" ] && $_PARENT_PROCESSES_FUNCTION
}
_parent_processes_pgrep() {
	pgrep -P $1
}
_init_pager() {
	[ "$_CONF_INSTALL_NO_PAGER" = "1" ] && PAGER=cat
}
_random() {
	local length=$_CONF_INSTALL_RANDOM_DEFAULT_LENGTH
	[ -n "$1" ] && {
		length=$1
		shift
	}
	openssl rand -base64 $length
}
_defer_cleanup_temp() {
	[ -z "$_TMP_CLEANUP_DEFERS" ] && _defer _cleanup_temp
	_TMP_CLEANUP_DEFERS="${_TMP_CLEANUP_DEFERS:+$_TMP_CLEANUP_DEFERS }$1"
}
_cleanup_temp() {
	if [ -n "$_TMP_CLEANUP_DEFERS" ]; then
		rm -rf $_TMP_CLEANUP_DEFERS
		unset _TMP_CLEANUP_DEFERS
	fi
}
_configure $_CONF_INSTALL_LIBRARY_PATH/$_APPLICATION_NAME/.metadata
_system_alert() {
	local system=$(head -1 /usr/local/etc/walterjwhite/system)
	local message=$(printf '%s\n%s\n' "$2")
	_alert "$system: $1" "$message"
}
_get_jail_paths() {
	grep 'path = ' /etc/jail.conf /etc/jail.conf.d -rh 2>/dev/null | awk -F'=' {'print$2'} | tr -d ' ;"' | sort -u
}
_get_jail_volume() {
	zfs list -H | grep "${1}$" | awk {'print$1'}
}
_in_jail() {
	[ $(sysctl -n security.jail.jailed) -eq 1 ] && return 0
	return 1
}
_wait_network() {
	ping -qo -i $_CONF_SYSTEM_MAINTENANCE_NETWORK_BACKOFF_TIME -c $_CONF_SYSTEM_MAINTENANCE_NETWORK_RETRIES $_CONF_SYSTEM_MAINTENANCE_NETWORK_TARGET >/dev/null 2>&1 && {
		_detail "Network is up"
		return
	}
	_error "Unable to get network connection"
}
_be() {
	unset _SYSTEM_CONFIGURATION_FILE _PATCHES _SYSTEM_BRANCH _SYSTEM_HASH _SYSTEM_BE _SYSTEM_BE_WITH_SEQUENCE _ACTIVE_BE _LAST_SEQUENCE_FILE _LAST_SEQUENCE
	_SYSTEM_CONFIGURATION_FILE=$_JAIL_PATH/usr/local/etc/walterjwhite/system
	_PATCHES=$_JAIL_PATH/usr/local/etc/walterjwhite/patches
	_SYSTEM_BRANCH=$(head -1 $_SYSTEM_CONFIGURATION_FILE | tr '/' '_')
	_SYSTEM_HASH=$(grep commit $_SYSTEM_CONFIGURATION_FILE | awk {'print$2'} | cut -c 1-8)
	_SYSTEM_BE=${_SYSTEM_HASH}.${_SYSTEM_BRANCH}
	_SYSTEM_BE_WITH_SEQUENCE=$_SYSTEM_BE
	if [ -n "$_JAIL_NAME" ]; then
		_ACTIVE_BE=$(zfs list -H -t snapshot $_JAIL_PATH | tail -1 | awk {'print$1'})
	else
		_ACTIVE_BE=$(beadm list -H | grep NR | awk {'print$1'})
	fi
	if [ -z "$_JAIL_NAME" ]; then
		if [ -z "$_ACTIVE_BE" ]; then
			_system_alert "reboot into latest BE: $_SYSTEM_BE"
			_error "reboot into latest BE: $_SYSTEM_BE"
		fi
	fi
	mkdir -p /usr/local/etc/walterjwhite/patches $_JAIL_PATH/usr/local/etc/walterjwhite/patches
	_LAST_SEQUENCE_FILE=$(find $_JAIL_PATH/usr/local/etc/walterjwhite/patches -type f | sort -n | tail -1)
	if [ -n "$_LAST_SEQUENCE_FILE" ]; then
		_LAST_SEQUENCE=$(basename $_LAST_SEQUENCE_FILE)
		_SYSTEM_BE_WITH_SEQUENCE="$_SYSTEM_BE.$_LAST_SEQUENCE"
	else
		_LAST_SEQUENCE=000
		_LAST_SEQUENCE_FILE=$_JAIL_PATH/usr/local/etc/walterjwhite/patches/$_LAST_SEQUENCE
		_SYSTEM_BE_WITH_SEQUENCE="$_SYSTEM_BE.$_LAST_SEQUENCE"
		_FIRST_BOOT=1 _create_be $_SYSTEM_BE_WITH_SEQUENCE
	fi
}
_do_reboot() {
	if [ -n "$_REBOOT_REQUIRED" ]; then
		_system_alert "reboot is required" "$_REBOOT_REQUIRED"
		if [ $_CONF_SYSTEM_MAINTENANCE_REBOOT -eq 1 ] || [ -n "$_FIRST_BOOT" ]; then
			if [ -n "$_ON_JAIL" ]; then
				service jail restart $_JAIL_NAME
			else
				_ reboot
			fi
		else
			_warn "not rebooting - $_CONF_SYSTEM_MAINTENANCE_REBOOT"
			_success "please reboot to install updates [$_REBOOT_REQUIRED]"
		fi
	fi
	unset _REBOOT_REQUIRED
}
_create_be() {
	if [ -n "$_ON_JAIL" ]; then
		_create_be_jail "$1"
		return
	fi
	_create_be_physical "$1"
}
_create_be_jail() {
	local target_jail_snapshot=$_JAIL_VOLUME@$1
	local latest_jail_snapshot=$(zfs list -H -t snapshot $_JAIL_VOLUME | tail -1 | awk {'print$1'})
	if [ "$latest_jail_snapshot" = "$target_jail_snapshot" ]; then
		_info "jail snapshot ($target_jail_snapshot) already exists"
		return
	fi
	_ zfs snapshot $target_jail_snapshot
	if [ -n "$_FIRST_BOOT" ]; then
		_warn "initializing patch sequence: $_LAST_SEQUENCE_FILE"
		printf 'create-be\n' >$_LAST_SEQUENCE_FILE
		printf '%s\n' "$(date)" >>$_LAST_SEQUENCE_FILE
	fi
}
_create_be_physical() {
	if [ $(beadm list -H | awk {'print$1'} | grep -c $1) -lt 1 ]; then
		if [ -n "$_FIRST_BOOT" ]; then
			_warn "initializing patch sequence: $_LAST_SEQUENCE_FILE"
			printf 'create-be\n' >$_LAST_SEQUENCE_FILE
			printf '%s\n' "$(date)" >>$_LAST_SEQUENCE_FILE
			_REBOOT_REQUIRED="First Boot, create BE"
		else
			_REBOOT_REQUIRED="$_PATCH_FNCTN updates available"
		fi
		local securelevel=$(sysrc kern_securelevel_enable | awk {'print$2'})
		if [ "$securelevel" = "YES" ]; then
			sysrc kern_securelevel_enable=NO
			_warn "TODO: Please run sysrc kern_securelevel_enable=YES to re-enable securelevel"
		fi
		_ beadm create $1
		_ beadm activate $1
		_do_reboot
	else
		_warn "BE: $1 already exists."
	fi
}
_has_freebsd_updates() {
	_PATCH_FNCTN=freebsd
	PAGER=cat
	_ freebsd-update $_FREEBSD_UPDATE_OPTIONS --not-running-from-cron fetch
	_WARN_ON_ERROR=1 _ freebsd-update $_FREEBSD_UPDATE_OPTIONS updatesready
	[ $? -eq 2 ] && return 1
	return 0
}
_has_freebsd_upgrade_updates() {
	_PATCH_FNCTN=freebsd_upgrade
	local fbsd_architecture=$(uname -p)
	_require "$fbsd_architecture" fbsd_architecture
	local fbsd_current_version=$(uname -r | grep -E -o '[[:digit:],\.]{4,}')
	_require "$fbsd_current_version" fbsd_current_version
	local fbsd_current_integer_version=$(printf '%s' "$fbsd_current_version" | sed s/[.]//)
	local fbsd_url="https://download.freebsd.org/releases/$fbsd_architecture/"
	local fbsd_lines=$(curl --silent $fbsd_url)
	if [ $? -ne 0 ]; then
		_warn "error downloading release page"
		return 1
	fi
	local fbsd_versions=$(printf '%s' "$fbsd_lines" | grep -o -E '[[:digit:]]{2}\.[[:digit:]]{1}-[[:alpha:]]{4,}' | grep -v 'BETA$' | sort -u)
	local fbsd_version
	for fbsd_version in $(printf '%s' "$fbsd_versions"); do
		local fbsd_integer_version=$(echo "$fbsd_version" | sed s/[[:alpha:],.-]//g)
		[ "$fbsd_integer_version" -gt "$fbsd_current_integer_version" ] && {
			_detail "available version: $fbsd_version"
			return 0
		}
	done
	local latest_version=$(curl -s https://download.freebsd.org/releases/amd64/ | awk '{print $3}' | grep RELEASE | tr -d '"' | tr -d '/' | cut -f2 -d'=' | sort | tail -1)
	local system_version=$(freebsd-version | /usr/local/bin/grep -Po '[\d\.]{1,}(-RELEASE)')
	[ "$latest_version" == "$system_version" ] && return 1
	local version_shortname=$(printf '%s' "$latest_version" | sed -e 's/-RELEASE.*$/R/')
	curl -f "https://www.freebsd.org/releases/$version_shortname/announce.asc" >/dev/null 2>&1
	[ $? -eq 22 ] && {
		_warn "Release $latest_version is not yet ready"
		return 1
	}
	_PATCH_FNCTN="$_PATCH_FNCTN|$latest_version"
	return 0
}
_has_userland_updates() {
	_PATCH_FNCTN=userland
	_ pkg $_PKG_UPDATE_OPTIONS update
	_WARN_ON_ERROR=1 _ pkg $_PKG_UPDATE_OPTIONS upgrade -n
	[ $? -eq 0 ] && return 1
	_ pkg $_PKG_UPDATE_OPTIONS upgrade -Fy
	return 0
}
_has_kernel_updates() {
	_PATCH_FNCTN=kernel
	cd /usr/src
	local kernel_git_branch=$(git branch --no-color --show-current)
	_require "$kernel_git_branch" kernel_git_branch
	_LATEST_REMOTE_VERSION=$(git ls-remote $(git remote -v | head -1 | awk {'print$2'}) | grep $kernel_git_branch | cut -f1)
	_LATEST_LOCAL_VERSION=$(git rev-parse HEAD)
	[ "$_LATEST_REMOTE_VERSION" = "$_LATEST_LOCAL_VERSION" ] && return 1
	return 0
}
_patch_be() {
	_info "$_PATCH_FNCTN updates available"
	if [ -z "$_LAST_SEQUENCE" ]; then
		_LAST_SEQUENCE=$(seq -w 0 1 $_CONF_SYSTEM_MAINTENANCE_MAX_PATCHES | head -1)
	else
		_LAST_SEQUENCE=$(seq -w $_LAST_SEQUENCE 1 $_CONF_SYSTEM_MAINTENANCE_MAX_PATCHES | sed 1d | head -1)
	fi
	_SYSTEM_BE_WITH_SEQUENCE="$_SYSTEM_BE.$_LAST_SEQUENCE"
	_LAST_SEQUENCE_FILE=$_JAIL_PATH/usr/local/etc/walterjwhite/patches/$_LAST_SEQUENCE
	if [ -n "$_DRY_RUN" ]; then
		_info "printf '%s\n' \"$_PATCH_FNCTN\" > $_LAST_SEQUENCE_FILE"
	else
		printf '%s\n' "$_PATCH_FNCTN" >$_LAST_SEQUENCE_FILE
	fi
	_create_be $_SYSTEM_BE_WITH_SEQUENCE
}
_get_jail_paths() {
	grep 'path = ' /etc/jail.conf /etc/jail.conf.d -rh 2>/dev/null | awk -F'=' {'print$2'} | tr -d ' ;"' | sort -u
}
_get_jail_volume() {
	zfs list -H | grep "${1}$" | awk {'print$1'}
}
_in_jail() {
	[ $(sysctl -n security.jail.jailed) -eq 1 ] && return 0
	return 1
}
_patch_jails() {
	_LOGGING_CONTEXT=jail
	_info "inspecting jails"
	_ON_JAIL=1
	for _JAIL_PATH in $(_get_jail_paths); do
		_JAIL_VOLUME=$(_get_jail_volume $_JAIL_PATH)
		_JAIL_NAME=$(basename $_JAIL_VOLUME)
		_LOGGING_CONTEXT=jail.$_JAIL_NAME
		_detail "inspecting jail"
		_FREEBSD_UPDATE_OPTIONS="-j $_JAIL_NAME"
		_PKG_UPDATE_OPTIONS="-j $_JAIL_NAME"
		_CHECKRESTART_OPTIONS="-j $_JAIL_NAME"
		_be
		_was_latest_patch_applied || _apply_patch
		_has_freebsd_updates && _patch_be && _apply_patch
		_has_freebsd_upgrade_updates && _patch_be && _apply_patch
		_has_userland_updates && _patch_be && _apply_patch
		_info "completed patching jail"
	done
	_info "no updates available"
}
_patch_freebsd() {
	_ freebsd-update $_FREEBSD_UPDATE_OPTIONS install
	if [ $? -eq 2 ]; then
		_warn "no updates available, fetch first"
		return
	fi
	_REBOOT_REQUIRED="FreeBSD updated"
	_CHECK_RESTART=1
}
_patch_freebsd_upgrade() {
	_patch_freebsd_upgrade_do upgrade install
}
_patch_freebsd_upgrade_install() {
	_patch_freebsd_upgrade_do install kernel
}
_patch_freebsd_upgrade_kernel() {
	_patch_kernel
}
_patch_freebsd_upgrade_do() {
	_require "$_PATCH_ARGUMENTS" _PATCH_ARGUMENTS
	_ freebsd-update $_FREEBSD_UPDATE_OPTIONS $1 -r $_PATCH_ARGUMENTS
	if [ $? -eq 2 ]; then
		_warn "no upgrades available"
		return
	fi
	_REBOOT_REQUIRED="FreeBSD Upgrade ${1}ed"
	_CHECK_RESTART=0
	_PATCH_FNCTN="$_PATCH_FNCTN|_patch_freebsd_upgrade_$1"
	_patch_be
}
_patch_userland() {
	_ pkg $_PKG_UPDATE_OPTIONS upgrade -y
	_CHECK_RESTART=1
}
_patch_kernel() {
	if [ -n "$_ON_JAIL" ]; then
		_error "Cannot update kernel for jail - $_JAIL_NAME"
	fi
	cd /usr/src
	_ git reset --hard HEAD
	local system_version=$(uname -r | sed -e 's/-RELEASE.*//')
	_ git checkout releng/$system_version
	_ git pull
	KERNCONF=custom
	_ make buildkernel && make installkernel
	_info "Rebuilt kernel, please reboot to use patched kernel"
	_REBOOT_REQUIRED="Kernel updated"
}
_checkrestart() {
	_info "checkrestart - start"
	_ checkrestart -H $_CHECKRESTART_OPTIONS
	local service_options
	if [ -n "$_JAIL_NAME" ]; then
		service_options="-j $_JAIL_NAME"
	fi
	local check_restart_service
	for check_restart_service in $(checkrestart -H $_CHECKRESTART_OPTIONS | awk {'print$3'}); do
		service $service_options $check_restart_service restart
	done
	if [ $(checkrestart -H $_CHECKRESTART_OPTIONS | wc -l) -gt 0 ]; then
		_warn "checkrestart - restart system / services *REQUIRED*"
		_REBOOT_REQUIRED=$(printf 'checkrestart - restart system / services *REQUIRED*\n%s\n%s\n' "checkrestart -H $_CHECKRESTART_OPTIONS" "$(checkrestart -H $_CHECKRESTART_OPTIONS)")
		_do_reboot
	fi
}
_was_latest_patch_applied() {
	if [ $(wc -l $_LAST_SEQUENCE_FILE | awk '{print$1}') -gt 1 ]; then
		_info "latest patch already applied"
		return 0
	fi
	return 1
}
_apply_patch() {
	_info "applying patch: $_LAST_SEQUENCE"
	if [ ! -e $_LAST_SEQUENCE_FILE ]; then
		_error "$_LAST_SEQUENCE_FILE does not exist"
	fi
	_SYSTEM_BE_WITH_SEQUENCE="$_SYSTEM_BE.$_LAST_SEQUENCE"
	_PATCH_FNCTN=$(head -1 $_LAST_SEQUENCE_FILE)
	_PATCH_ARGUMENTS=$(printf '%s' "$_PATCH_FNCTN" | cut -f2 -d'|' -s)
	if [ -n "$_PATCH_ARGUMENTS" ]; then
		_PATCH_FNCTN=$(printf '%s' "$_PATCH_FNCTN" | cut -f1 -d'|' -s)
	fi
	if [ -z "$_JAIL_PATH" ]; then
		if [ "$_ACTIVE_BE" != "$_SYSTEM_BE_WITH_SEQUENCE" ]; then
			_error "reboot into latest BE: $_ACTIVE_BE ($_SYSTEM_BE_WITH_SEQUENCE) before applying patches [$_PATCH_FNCTN]"
		fi
	else
		_warn "no need to reboot, patching jail: $_JAIL_PATH"
	fi
	_info "applying patches, BE: $_SYSTEM_BE_WITH_SEQUENCE [$_PATCH_FNCTN]"
	_patch_$_PATCH_FNCTN
	if [ -n "$_DRY_RUN" ]; then
		_info "date >>$_LAST_SEQUENCE_FILE"
	else
		date >>$_LAST_SEQUENCE_FILE
	fi
	if [ -n "$_CHECK_RESTART" ]; then
		_checkrestart
	fi
	_do_reboot
}
_patch_physical() {
	_LOGGING_CONTEXT=physical
	_be
	_wait_network
	_was_latest_patch_applied || _apply_patch
	_info "checking if additional updates are available"
	_has_freebsd_updates && _patch_be
	_has_freebsd_upgrade_updates && _patch_be
	_has_userland_updates && _patch_be
	_has_kernel_updates && _patch_be
	_info "no updates available"
}
case $_DETECTED_PLATFORM in
$_PLATFORM) ;;
Apple | FreeBSD | Linux | Windows)
	_error "Please use the appropriate platform-specific installer ($_DETECTED_PLATFORM)"
	;;
*)
	_error "Unsupported platform ($_DETECTED_PLATFORM)"
	;;
esac
_APPLICATION_START_TIME=$(date +%s)
_APPLICATION_CMD=$(basename $0)
unset _DEFERS
_is_backgrounded && _BACKGROUNDED=1
[ -z "$_INSTALL_INSTALLER" ] && _PACKAGE_DISABLED=1
for _ARG in "$@"; do
	case $_ARG in
	-h | --help)
		_print_help_and_exit
		;;
	-kill-all)
		_kill_all
		_success "Killed all"
		;;
	-kill-all-group)
		_kill_all_group
		_success "Killed all group"
		;;
	-kill=*)
		_kill ${_ARG#*=}
		_success "Killed ${_ARG#*=}"
		;;
	-lr)
		_list
		_success "listed running processes"
		shift
		;;
	-lg)
		_list_group
		_success "listed running processes"
		;;
	-w=*)
		_WAITER_PID="${1#*=}"
		shift
		;;
	-w)
		_CONF_INSTALL_WAITER_LEVEL=_info
		_WAITEE=1
		shift
		;;
	-conf-* | -[a-z0-9][a-z0-9][a-z0-9]*)
		_configuration_name=${_ARG#*-}
		_configuration_name=${_configuration_name%%=*}
		if [ $(printf '%s' "$_configuration_name" | grep -c '_') -eq 0 ]; then
			if [ $(printf '%s' "$_configuration_name" | grep -c '^conf') -gt 0 ]; then
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/-/-$_APPLICATION_NAME-/")
			else
				_configuration_name=$(printf '%s' "$_configuration_name" | sed -e "s/^/$_APPLICATION_NAME-/")
			fi
		fi
		_configuration_name=$(printf '%s' $_configuration_name | tr '-' '_' | tr '[:lower:]' '[:upper:]')
		if [ $(printf '%s' "$_ARG" | grep -c '=') -eq 0 ]; then
			_configuration_value=1
		else
			_configuration_value=${_ARG#*=}
		fi
		export _$_configuration_name="$_configuration_value"
		unset _configuration_name
		shift
		;;
	*)
		break
		;;
	esac
done
trap _on_exit INT 0 1 2 3 4 6 15
_init_logging
_init_application_context
_debug "REMAINING ARGS: $*"
_log_app init
_init_pager
_waiter
_has_required_conf
if [ -n "$_REQUIRED_ARGUMENTS" ]; then
	_DISCOVERED_ARGUMENT_COUNT=$(printf '%s' "$_REQUIRED_ARGUMENTS" | sed -e 's/$/\n/' | tr '|' '\n' | wc -l | awk {'print$1'})
	_required_arguments_argument_log_level=debug
	_ACTUAL_ARGUMENT_COUNT=$#
	[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _required_arguments_argument_log_level=warn
	_$_required_arguments_argument_log_level "Expecting $_DISCOVERED_ARGUMENT_COUNT, received $# arguments"
	_INDEX=1
	_ARGUMENT_LOG_LEVEL=info
	while [ $_INDEX -le $_DISCOVERED_ARGUMENT_COUNT ]; do
		_ARGUMENT_NAME=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_INDEX}p | sed -e 's/:.*$//')
		_ARGUMENT_MESSAGE=$(printf '%s' "$_REQUIRED_ARGUMENTS" | tr '|' '\n' | sed -n ${_INDEX}p | sed -e 's/^.*://')
		if [ -z "$1" ]; then
			_$_required_arguments_argument_log_level "$_INDEX:$_ARGUMENT_MESSAGE was not provided"
		else
			_$_required_arguments_argument_log_level "$_INDEX:$_ARGUMENT_NAME=$1"
			export $_ARGUMENT_NAME="$1"
			shift
		fi
		_INDEX=$(($_INDEX + 1))
	done
	[ $_ACTUAL_ARGUMENT_COUNT -lt $_DISCOVERED_ARGUMENT_COUNT ] && _error "Missing arguments"
	unset _INDEX _ARGUMENT_NAME _ARGUMENT_MESSAGE _required_arguments_argument_log_level
	_DISCOVERED_REQUIRED_ARGUMENTS="$_REQUIRED_ARGUMENTS"
	unset _REQUIRED_ARGUMENTS
else
	_debug "NO _REQUIRED_ARGUMENTS args"
	unset _DISCOVERED_REQUIRED_ARGUMENTS _DISCOVERED_ARGUMENT_COUNT
fi
if [ "$(whoami)" = "root" ]; then
	if [ -n "$_SUDO_CMD" ]; then
		_SUDO_NORMAL_USER_CMD="$_SUDO_CMD -u $USER"
	fi
fi
_in_jail && _error "Update System is not designed to run inside jails, aborting"
_patch_physical
_patch_jails
